/**
 * Autogenerated by Thrift Compiler (DNA Version, Base 0.90.0)
 *
 *  @CDN Department. ChinaNetCenter 2014
 */
package com.cnc.dna.api.openQS.StatisticsReport.v1;

import com.cnc.dna.platform.thrift.scheme.IScheme;
import com.cnc.dna.platform.thrift.scheme.SchemeFactory;
import com.cnc.dna.platform.thrift.scheme.StandardScheme;

import com.cnc.dna.platform.thrift.scheme.TupleScheme;
import com.cnc.dna.platform.thrift.protocol.TTupleProtocol;
import com.cnc.dna.platform.thrift.protocol.TProtocolException;
import com.cnc.dna.platform.thrift.EncodingUtils;
import com.cnc.dna.platform.thrift.TException;
import com.cnc.dna.platform.rpc.spi.context.IdlInvocation;
import com.cnc.dna.platform.rpc.spi.context.IdlResult;
import com.cnc.dna.platform.rpc.Handler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryParam implements com.cnc.dna.platform.thrift.TBase<QueryParam, QueryParam._Fields>, java.io.Serializable, Cloneable {
  private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("QueryParam");

  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_IDS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskIds", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
  private static final com.cnc.dna.platform.thrift.protocol.TField TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("type", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
  private static final com.cnc.dna.platform.thrift.protocol.TField DATE_BEGIN_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("dateBegin", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)3);
  private static final com.cnc.dna.platform.thrift.protocol.TField DATE_END_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("dateEnd", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)4);
  private static final com.cnc.dna.platform.thrift.protocol.TField AREA_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("area", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)5);
  private static final com.cnc.dna.platform.thrift.protocol.TField ISP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("isp", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)6);
  private static final com.cnc.dna.platform.thrift.protocol.TField QUOTA_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("quota", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)7);
  private static final com.cnc.dna.platform.thrift.protocol.TField HIGH_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("high", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)8);
  private static final com.cnc.dna.platform.thrift.protocol.TField LOW_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("low", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)9);
  private static final com.cnc.dna.platform.thrift.protocol.TField MON_FILTER_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("monFilterType", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)10);
  private static final com.cnc.dna.platform.thrift.protocol.TField MON_FILTER_IP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("monFilterIp", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)11);
  private static final com.cnc.dna.platform.thrift.protocol.TField TARGET_FILTER_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("targetFilterType", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)12);
  private static final com.cnc.dna.platform.thrift.protocol.TField TARGET_FILTER_IP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("targetFilterIp", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)13);
  private static final com.cnc.dna.platform.thrift.protocol.TField AUTO_FILL_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("autoFill", com.cnc.dna.platform.thrift.protocol.TType.BOOL, (short)14);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_DOMAIN_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskDomain", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)15);
  private static final com.cnc.dna.platform.thrift.protocol.TField IS_SOURCE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("isSource", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)16);
  private static final com.cnc.dna.platform.thrift.protocol.TField DECT_ID_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("dectId", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)17);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupType", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)18);
  private static final com.cnc.dna.platform.thrift.protocol.TField TIME_RANGE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("timeRange", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryParamTupleSchemeFactory());
  }

  private String taskIds; // required
  private String type; // required
  private String dateBegin; // required
  private String dateEnd; // required
  private String area; // required
  private String isp; // required
  private String quota; // required
  private String high; // required
  private String low; // required
  private String monFilterType; // required
  private String monFilterIp; // required
  private String targetFilterType; // required
  private String targetFilterIp; // required
  private boolean autoFill; // required
  private String taskDomain; // required
  private String isSource; // required
  private String dectId; // required
  private TaskGroupType taskGroupType; // required
  private int timeRange; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
    TASK_IDS((short)1, "taskIds"),
    TYPE((short)2, "type"),
    DATE_BEGIN((short)3, "dateBegin"),
    DATE_END((short)4, "dateEnd"),
    AREA((short)5, "area"),
    ISP((short)6, "isp"),
    QUOTA((short)7, "quota"),
    HIGH((short)8, "high"),
    LOW((short)9, "low"),
    MON_FILTER_TYPE((short)10, "monFilterType"),
    MON_FILTER_IP((short)11, "monFilterIp"),
    TARGET_FILTER_TYPE((short)12, "targetFilterType"),
    TARGET_FILTER_IP((short)13, "targetFilterIp"),
    AUTO_FILL((short)14, "autoFill"),
    TASK_DOMAIN((short)15, "taskDomain"),
    IS_SOURCE((short)16, "isSource"),
    DECT_ID((short)17, "dectId"),
    /**
     * 
     * @see TaskGroupType
     */
    TASK_GROUP_TYPE((short)18, "taskGroupType"),
    TIME_RANGE((short)19, "timeRange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_IDS
          return TASK_IDS;
        case 2: // TYPE
          return TYPE;
        case 3: // DATE_BEGIN
          return DATE_BEGIN;
        case 4: // DATE_END
          return DATE_END;
        case 5: // AREA
          return AREA;
        case 6: // ISP
          return ISP;
        case 7: // QUOTA
          return QUOTA;
        case 8: // HIGH
          return HIGH;
        case 9: // LOW
          return LOW;
        case 10: // MON_FILTER_TYPE
          return MON_FILTER_TYPE;
        case 11: // MON_FILTER_IP
          return MON_FILTER_IP;
        case 12: // TARGET_FILTER_TYPE
          return TARGET_FILTER_TYPE;
        case 13: // TARGET_FILTER_IP
          return TARGET_FILTER_IP;
        case 14: // AUTO_FILL
          return AUTO_FILL;
        case 15: // TASK_DOMAIN
          return TASK_DOMAIN;
        case 16: // IS_SOURCE
          return IS_SOURCE;
        case 17: // DECT_ID
          return DECT_ID;
        case 18: // TASK_GROUP_TYPE
          return TASK_GROUP_TYPE;
        case 19: // TIME_RANGE
          return TIME_RANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTOFILL_ISSET_ID = 0;
  private static final int __TIMERANGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
  public static final List<_Fields> fieldList = new ArrayList();
  static {
    Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_IDS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskIds", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_IDS);
    tmpMap.put(_Fields.TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("type", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TYPE);
    tmpMap.put(_Fields.DATE_BEGIN, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("dateBegin", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.DATE_BEGIN);
    tmpMap.put(_Fields.DATE_END, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("dateEnd", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.DATE_END);
    tmpMap.put(_Fields.AREA, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("area", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.AREA);
    tmpMap.put(_Fields.ISP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("isp", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.ISP);
    tmpMap.put(_Fields.QUOTA, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("quota", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.QUOTA);
    tmpMap.put(_Fields.HIGH, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("high", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.HIGH);
    tmpMap.put(_Fields.LOW, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("low", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.LOW);
    tmpMap.put(_Fields.MON_FILTER_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("monFilterType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.MON_FILTER_TYPE);
    tmpMap.put(_Fields.MON_FILTER_IP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("monFilterIp", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.MON_FILTER_IP);
    tmpMap.put(_Fields.TARGET_FILTER_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("targetFilterType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TARGET_FILTER_TYPE);
    tmpMap.put(_Fields.TARGET_FILTER_IP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("targetFilterIp", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TARGET_FILTER_IP);
    tmpMap.put(_Fields.AUTO_FILL, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("autoFill", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.BOOL)));
    fieldList.add(_Fields.AUTO_FILL);
    tmpMap.put(_Fields.TASK_DOMAIN, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskDomain", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_DOMAIN);
    tmpMap.put(_Fields.IS_SOURCE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("isSource", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.IS_SOURCE);
    tmpMap.put(_Fields.DECT_ID, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("dectId", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.DECT_ID);
    tmpMap.put(_Fields.TASK_GROUP_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.EnumMetaData(com.cnc.dna.platform.thrift.protocol.TType.ENUM, TaskGroupType.class)));
    fieldList.add(_Fields.TASK_GROUP_TYPE);
    tmpMap.put(_Fields.TIME_RANGE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("timeRange", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TIME_RANGE);
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryParam.class, metaDataMap);
  }

  public _Fields getFieldByIndex(int index) {
  	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
  public QueryParam() {
    this.autoFill = false;

  }

  public QueryParam(
    String taskIds,
    String type,
    String dateBegin,
    String dateEnd,
    String area,
    String isp,
    String quota,
    String high,
    String low,
    String monFilterType,
    String monFilterIp,
    String targetFilterType,
    String targetFilterIp,
    boolean autoFill,
    String taskDomain,
    String isSource,
    String dectId,
    TaskGroupType taskGroupType,
    int timeRange)
  {
    this();
    this.taskIds = taskIds;
    this.type = type;
    this.dateBegin = dateBegin;
    this.dateEnd = dateEnd;
    this.area = area;
    this.isp = isp;
    this.quota = quota;
    this.high = high;
    this.low = low;
    this.monFilterType = monFilterType;
    this.monFilterIp = monFilterIp;
    this.targetFilterType = targetFilterType;
    this.targetFilterIp = targetFilterIp;
    this.autoFill = autoFill;
    setAutoFillIsSet(true);
    this.taskDomain = taskDomain;
    this.isSource = isSource;
    this.dectId = dectId;
    this.taskGroupType = taskGroupType;
    this.timeRange = timeRange;
    setTimeRangeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryParam(QueryParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskIds()) {
      this.taskIds = other.taskIds;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDateBegin()) {
      this.dateBegin = other.dateBegin;
    }
    if (other.isSetDateEnd()) {
      this.dateEnd = other.dateEnd;
    }
    if (other.isSetArea()) {
      this.area = other.area;
    }
    if (other.isSetIsp()) {
      this.isp = other.isp;
    }
    if (other.isSetQuota()) {
      this.quota = other.quota;
    }
    if (other.isSetHigh()) {
      this.high = other.high;
    }
    if (other.isSetLow()) {
      this.low = other.low;
    }
    if (other.isSetMonFilterType()) {
      this.monFilterType = other.monFilterType;
    }
    if (other.isSetMonFilterIp()) {
      this.monFilterIp = other.monFilterIp;
    }
    if (other.isSetTargetFilterType()) {
      this.targetFilterType = other.targetFilterType;
    }
    if (other.isSetTargetFilterIp()) {
      this.targetFilterIp = other.targetFilterIp;
    }
    this.autoFill = other.autoFill;
    if (other.isSetTaskDomain()) {
      this.taskDomain = other.taskDomain;
    }
    if (other.isSetIsSource()) {
      this.isSource = other.isSource;
    }
    if (other.isSetDectId()) {
      this.dectId = other.dectId;
    }
    if (other.isSetTaskGroupType()) {
      this.taskGroupType = other.taskGroupType;
    }
    this.timeRange = other.timeRange;
  }

  public QueryParam deepCopy() {
    return new QueryParam(this);
  }

  @Override
  public void clear() {
    this.taskIds = null;
    this.type = null;
    this.dateBegin = null;
    this.dateEnd = null;
    this.area = null;
    this.isp = null;
    this.quota = null;
    this.high = null;
    this.low = null;
    this.monFilterType = null;
    this.monFilterIp = null;
    this.targetFilterType = null;
    this.targetFilterIp = null;
    this.autoFill = false;

    this.taskDomain = null;
    this.isSource = null;
    this.dectId = null;
    this.taskGroupType = null;
    setTimeRangeIsSet(false);
    this.timeRange = 0;
  }

  public String getTaskIds() {
    return this.taskIds;
  }

  public void setTaskIds(String taskIds) {
    this.taskIds = taskIds;
  }

  public void unsetTaskIds() {
    this.taskIds = null;
  }

  /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskIds() {
    return this.taskIds != null;
  }

  public void setTaskIdsIsSet(boolean value) {
    if (!value) {
      this.taskIds = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getDateBegin() {
    return this.dateBegin;
  }

  public void setDateBegin(String dateBegin) {
    this.dateBegin = dateBegin;
  }

  public void unsetDateBegin() {
    this.dateBegin = null;
  }

  /** Returns true if field dateBegin is set (has been assigned a value) and false otherwise */
  public boolean isSetDateBegin() {
    return this.dateBegin != null;
  }

  public void setDateBeginIsSet(boolean value) {
    if (!value) {
      this.dateBegin = null;
    }
  }

  public String getDateEnd() {
    return this.dateEnd;
  }

  public void setDateEnd(String dateEnd) {
    this.dateEnd = dateEnd;
  }

  public void unsetDateEnd() {
    this.dateEnd = null;
  }

  /** Returns true if field dateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetDateEnd() {
    return this.dateEnd != null;
  }

  public void setDateEndIsSet(boolean value) {
    if (!value) {
      this.dateEnd = null;
    }
  }

  public String getArea() {
    return this.area;
  }

  public void setArea(String area) {
    this.area = area;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  public String getIsp() {
    return this.isp;
  }

  public void setIsp(String isp) {
    this.isp = isp;
  }

  public void unsetIsp() {
    this.isp = null;
  }

  /** Returns true if field isp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsp() {
    return this.isp != null;
  }

  public void setIspIsSet(boolean value) {
    if (!value) {
      this.isp = null;
    }
  }

  public String getQuota() {
    return this.quota;
  }

  public void setQuota(String quota) {
    this.quota = quota;
  }

  public void unsetQuota() {
    this.quota = null;
  }

  /** Returns true if field quota is set (has been assigned a value) and false otherwise */
  public boolean isSetQuota() {
    return this.quota != null;
  }

  public void setQuotaIsSet(boolean value) {
    if (!value) {
      this.quota = null;
    }
  }

  public String getHigh() {
    return this.high;
  }

  public void setHigh(String high) {
    this.high = high;
  }

  public void unsetHigh() {
    this.high = null;
  }

  /** Returns true if field high is set (has been assigned a value) and false otherwise */
  public boolean isSetHigh() {
    return this.high != null;
  }

  public void setHighIsSet(boolean value) {
    if (!value) {
      this.high = null;
    }
  }

  public String getLow() {
    return this.low;
  }

  public void setLow(String low) {
    this.low = low;
  }

  public void unsetLow() {
    this.low = null;
  }

  /** Returns true if field low is set (has been assigned a value) and false otherwise */
  public boolean isSetLow() {
    return this.low != null;
  }

  public void setLowIsSet(boolean value) {
    if (!value) {
      this.low = null;
    }
  }

  public String getMonFilterType() {
    return this.monFilterType;
  }

  public void setMonFilterType(String monFilterType) {
    this.monFilterType = monFilterType;
  }

  public void unsetMonFilterType() {
    this.monFilterType = null;
  }

  /** Returns true if field monFilterType is set (has been assigned a value) and false otherwise */
  public boolean isSetMonFilterType() {
    return this.monFilterType != null;
  }

  public void setMonFilterTypeIsSet(boolean value) {
    if (!value) {
      this.monFilterType = null;
    }
  }

  public String getMonFilterIp() {
    return this.monFilterIp;
  }

  public void setMonFilterIp(String monFilterIp) {
    this.monFilterIp = monFilterIp;
  }

  public void unsetMonFilterIp() {
    this.monFilterIp = null;
  }

  /** Returns true if field monFilterIp is set (has been assigned a value) and false otherwise */
  public boolean isSetMonFilterIp() {
    return this.monFilterIp != null;
  }

  public void setMonFilterIpIsSet(boolean value) {
    if (!value) {
      this.monFilterIp = null;
    }
  }

  public String getTargetFilterType() {
    return this.targetFilterType;
  }

  public void setTargetFilterType(String targetFilterType) {
    this.targetFilterType = targetFilterType;
  }

  public void unsetTargetFilterType() {
    this.targetFilterType = null;
  }

  /** Returns true if field targetFilterType is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetFilterType() {
    return this.targetFilterType != null;
  }

  public void setTargetFilterTypeIsSet(boolean value) {
    if (!value) {
      this.targetFilterType = null;
    }
  }

  public String getTargetFilterIp() {
    return this.targetFilterIp;
  }

  public void setTargetFilterIp(String targetFilterIp) {
    this.targetFilterIp = targetFilterIp;
  }

  public void unsetTargetFilterIp() {
    this.targetFilterIp = null;
  }

  /** Returns true if field targetFilterIp is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetFilterIp() {
    return this.targetFilterIp != null;
  }

  public void setTargetFilterIpIsSet(boolean value) {
    if (!value) {
      this.targetFilterIp = null;
    }
  }

  public boolean isAutoFill() {
    return this.autoFill;
  }

  public void setAutoFill(boolean autoFill) {
    this.autoFill = autoFill;
    setAutoFillIsSet(true);
  }

  public void unsetAutoFill() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTOFILL_ISSET_ID);
  }

  /** Returns true if field autoFill is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoFill() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTOFILL_ISSET_ID);
  }

  public void setAutoFillIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTOFILL_ISSET_ID, value);
  }

  public String getTaskDomain() {
    return this.taskDomain;
  }

  public void setTaskDomain(String taskDomain) {
    this.taskDomain = taskDomain;
  }

  public void unsetTaskDomain() {
    this.taskDomain = null;
  }

  /** Returns true if field taskDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskDomain() {
    return this.taskDomain != null;
  }

  public void setTaskDomainIsSet(boolean value) {
    if (!value) {
      this.taskDomain = null;
    }
  }

  public String getIsSource() {
    return this.isSource;
  }

  public void setIsSource(String isSource) {
    this.isSource = isSource;
  }

  public void unsetIsSource() {
    this.isSource = null;
  }

  /** Returns true if field isSource is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSource() {
    return this.isSource != null;
  }

  public void setIsSourceIsSet(boolean value) {
    if (!value) {
      this.isSource = null;
    }
  }

  public String getDectId() {
    return this.dectId;
  }

  public void setDectId(String dectId) {
    this.dectId = dectId;
  }

  public void unsetDectId() {
    this.dectId = null;
  }

  /** Returns true if field dectId is set (has been assigned a value) and false otherwise */
  public boolean isSetDectId() {
    return this.dectId != null;
  }

  public void setDectIdIsSet(boolean value) {
    if (!value) {
      this.dectId = null;
    }
  }

  /**
   * 
   * @see TaskGroupType
   */
  public TaskGroupType getTaskGroupType() {
    return this.taskGroupType;
  }

  /**
   * 
   * @see TaskGroupType
   */
  public void setTaskGroupType(TaskGroupType taskGroupType) {
    this.taskGroupType = taskGroupType;
  }

  public void unsetTaskGroupType() {
    this.taskGroupType = null;
  }

  /** Returns true if field taskGroupType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupType() {
    return this.taskGroupType != null;
  }

  public void setTaskGroupTypeIsSet(boolean value) {
    if (!value) {
      this.taskGroupType = null;
    }
  }

  public int getTimeRange() {
    return this.timeRange;
  }

  public void setTimeRange(int timeRange) {
    this.timeRange = timeRange;
    setTimeRangeIsSet(true);
  }

  public void unsetTimeRange() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMERANGE_ISSET_ID);
  }

  /** Returns true if field timeRange is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeRange() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMERANGE_ISSET_ID);
  }

  public void setTimeRangeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMERANGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_IDS:
      if (value == null) {
        unsetTaskIds();
      } else {
        setTaskIds((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case DATE_BEGIN:
      if (value == null) {
        unsetDateBegin();
      } else {
        setDateBegin((String)value);
      }
      break;

    case DATE_END:
      if (value == null) {
        unsetDateEnd();
      } else {
        setDateEnd((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((String)value);
      }
      break;

    case ISP:
      if (value == null) {
        unsetIsp();
      } else {
        setIsp((String)value);
      }
      break;

    case QUOTA:
      if (value == null) {
        unsetQuota();
      } else {
        setQuota((String)value);
      }
      break;

    case HIGH:
      if (value == null) {
        unsetHigh();
      } else {
        setHigh((String)value);
      }
      break;

    case LOW:
      if (value == null) {
        unsetLow();
      } else {
        setLow((String)value);
      }
      break;

    case MON_FILTER_TYPE:
      if (value == null) {
        unsetMonFilterType();
      } else {
        setMonFilterType((String)value);
      }
      break;

    case MON_FILTER_IP:
      if (value == null) {
        unsetMonFilterIp();
      } else {
        setMonFilterIp((String)value);
      }
      break;

    case TARGET_FILTER_TYPE:
      if (value == null) {
        unsetTargetFilterType();
      } else {
        setTargetFilterType((String)value);
      }
      break;

    case TARGET_FILTER_IP:
      if (value == null) {
        unsetTargetFilterIp();
      } else {
        setTargetFilterIp((String)value);
      }
      break;

    case AUTO_FILL:
      if (value == null) {
        unsetAutoFill();
      } else {
        setAutoFill((Boolean)value);
      }
      break;

    case TASK_DOMAIN:
      if (value == null) {
        unsetTaskDomain();
      } else {
        setTaskDomain((String)value);
      }
      break;

    case IS_SOURCE:
      if (value == null) {
        unsetIsSource();
      } else {
        setIsSource((String)value);
      }
      break;

    case DECT_ID:
      if (value == null) {
        unsetDectId();
      } else {
        setDectId((String)value);
      }
      break;

    case TASK_GROUP_TYPE:
      if (value == null) {
        unsetTaskGroupType();
      } else {
        setTaskGroupType((TaskGroupType)value);
      }
      break;

    case TIME_RANGE:
      if (value == null) {
        unsetTimeRange();
      } else {
        setTimeRange((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_IDS:
      return getTaskIds();

    case TYPE:
      return getType();

    case DATE_BEGIN:
      return getDateBegin();

    case DATE_END:
      return getDateEnd();

    case AREA:
      return getArea();

    case ISP:
      return getIsp();

    case QUOTA:
      return getQuota();

    case HIGH:
      return getHigh();

    case LOW:
      return getLow();

    case MON_FILTER_TYPE:
      return getMonFilterType();

    case MON_FILTER_IP:
      return getMonFilterIp();

    case TARGET_FILTER_TYPE:
      return getTargetFilterType();

    case TARGET_FILTER_IP:
      return getTargetFilterIp();

    case AUTO_FILL:
      return Boolean.valueOf(isAutoFill());

    case TASK_DOMAIN:
      return getTaskDomain();

    case IS_SOURCE:
      return getIsSource();

    case DECT_ID:
      return getDectId();

    case TASK_GROUP_TYPE:
      return getTaskGroupType();

    case TIME_RANGE:
      return Integer.valueOf(getTimeRange());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_IDS:
      return isSetTaskIds();
    case TYPE:
      return isSetType();
    case DATE_BEGIN:
      return isSetDateBegin();
    case DATE_END:
      return isSetDateEnd();
    case AREA:
      return isSetArea();
    case ISP:
      return isSetIsp();
    case QUOTA:
      return isSetQuota();
    case HIGH:
      return isSetHigh();
    case LOW:
      return isSetLow();
    case MON_FILTER_TYPE:
      return isSetMonFilterType();
    case MON_FILTER_IP:
      return isSetMonFilterIp();
    case TARGET_FILTER_TYPE:
      return isSetTargetFilterType();
    case TARGET_FILTER_IP:
      return isSetTargetFilterIp();
    case AUTO_FILL:
      return isSetAutoFill();
    case TASK_DOMAIN:
      return isSetTaskDomain();
    case IS_SOURCE:
      return isSetIsSource();
    case DECT_ID:
      return isSetDectId();
    case TASK_GROUP_TYPE:
      return isSetTaskGroupType();
    case TIME_RANGE:
      return isSetTimeRange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryParam)
      return this.equals((QueryParam)that);
    return false;
  }

  public boolean equals(QueryParam that) {
    if (that == null)
      return false;

    boolean this_present_taskIds = true && this.isSetTaskIds();
    boolean that_present_taskIds = true && that.isSetTaskIds();
    if (this_present_taskIds || that_present_taskIds) {
      if (!(this_present_taskIds && that_present_taskIds))
        return false;
      if (!this.taskIds.equals(that.taskIds))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_dateBegin = true && this.isSetDateBegin();
    boolean that_present_dateBegin = true && that.isSetDateBegin();
    if (this_present_dateBegin || that_present_dateBegin) {
      if (!(this_present_dateBegin && that_present_dateBegin))
        return false;
      if (!this.dateBegin.equals(that.dateBegin))
        return false;
    }

    boolean this_present_dateEnd = true && this.isSetDateEnd();
    boolean that_present_dateEnd = true && that.isSetDateEnd();
    if (this_present_dateEnd || that_present_dateEnd) {
      if (!(this_present_dateEnd && that_present_dateEnd))
        return false;
      if (!this.dateEnd.equals(that.dateEnd))
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_isp = true && this.isSetIsp();
    boolean that_present_isp = true && that.isSetIsp();
    if (this_present_isp || that_present_isp) {
      if (!(this_present_isp && that_present_isp))
        return false;
      if (!this.isp.equals(that.isp))
        return false;
    }

    boolean this_present_quota = true && this.isSetQuota();
    boolean that_present_quota = true && that.isSetQuota();
    if (this_present_quota || that_present_quota) {
      if (!(this_present_quota && that_present_quota))
        return false;
      if (!this.quota.equals(that.quota))
        return false;
    }

    boolean this_present_high = true && this.isSetHigh();
    boolean that_present_high = true && that.isSetHigh();
    if (this_present_high || that_present_high) {
      if (!(this_present_high && that_present_high))
        return false;
      if (!this.high.equals(that.high))
        return false;
    }

    boolean this_present_low = true && this.isSetLow();
    boolean that_present_low = true && that.isSetLow();
    if (this_present_low || that_present_low) {
      if (!(this_present_low && that_present_low))
        return false;
      if (!this.low.equals(that.low))
        return false;
    }

    boolean this_present_monFilterType = true && this.isSetMonFilterType();
    boolean that_present_monFilterType = true && that.isSetMonFilterType();
    if (this_present_monFilterType || that_present_monFilterType) {
      if (!(this_present_monFilterType && that_present_monFilterType))
        return false;
      if (!this.monFilterType.equals(that.monFilterType))
        return false;
    }

    boolean this_present_monFilterIp = true && this.isSetMonFilterIp();
    boolean that_present_monFilterIp = true && that.isSetMonFilterIp();
    if (this_present_monFilterIp || that_present_monFilterIp) {
      if (!(this_present_monFilterIp && that_present_monFilterIp))
        return false;
      if (!this.monFilterIp.equals(that.monFilterIp))
        return false;
    }

    boolean this_present_targetFilterType = true && this.isSetTargetFilterType();
    boolean that_present_targetFilterType = true && that.isSetTargetFilterType();
    if (this_present_targetFilterType || that_present_targetFilterType) {
      if (!(this_present_targetFilterType && that_present_targetFilterType))
        return false;
      if (!this.targetFilterType.equals(that.targetFilterType))
        return false;
    }

    boolean this_present_targetFilterIp = true && this.isSetTargetFilterIp();
    boolean that_present_targetFilterIp = true && that.isSetTargetFilterIp();
    if (this_present_targetFilterIp || that_present_targetFilterIp) {
      if (!(this_present_targetFilterIp && that_present_targetFilterIp))
        return false;
      if (!this.targetFilterIp.equals(that.targetFilterIp))
        return false;
    }

    boolean this_present_autoFill = true;
    boolean that_present_autoFill = true;
    if (this_present_autoFill || that_present_autoFill) {
      if (!(this_present_autoFill && that_present_autoFill))
        return false;
      if (this.autoFill != that.autoFill)
        return false;
    }

    boolean this_present_taskDomain = true && this.isSetTaskDomain();
    boolean that_present_taskDomain = true && that.isSetTaskDomain();
    if (this_present_taskDomain || that_present_taskDomain) {
      if (!(this_present_taskDomain && that_present_taskDomain))
        return false;
      if (!this.taskDomain.equals(that.taskDomain))
        return false;
    }

    boolean this_present_isSource = true && this.isSetIsSource();
    boolean that_present_isSource = true && that.isSetIsSource();
    if (this_present_isSource || that_present_isSource) {
      if (!(this_present_isSource && that_present_isSource))
        return false;
      if (!this.isSource.equals(that.isSource))
        return false;
    }

    boolean this_present_dectId = true && this.isSetDectId();
    boolean that_present_dectId = true && that.isSetDectId();
    if (this_present_dectId || that_present_dectId) {
      if (!(this_present_dectId && that_present_dectId))
        return false;
      if (!this.dectId.equals(that.dectId))
        return false;
    }

    boolean this_present_taskGroupType = true && this.isSetTaskGroupType();
    boolean that_present_taskGroupType = true && that.isSetTaskGroupType();
    if (this_present_taskGroupType || that_present_taskGroupType) {
      if (!(this_present_taskGroupType && that_present_taskGroupType))
        return false;
      if (!this.taskGroupType.equals(that.taskGroupType))
        return false;
    }

    boolean this_present_timeRange = true;
    boolean that_present_timeRange = true;
    if (this_present_timeRange || that_present_timeRange) {
      if (!(this_present_timeRange && that_present_timeRange))
        return false;
      if (this.timeRange != that.timeRange)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryParam typedOther = (QueryParam)other;

    lastComparison = Boolean.valueOf(isSetTaskIds()).compareTo(typedOther.isSetTaskIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskIds()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskIds, typedOther.taskIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateBegin()).compareTo(typedOther.isSetDateBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateBegin()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.dateBegin, typedOther.dateBegin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateEnd()).compareTo(typedOther.isSetDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateEnd()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.dateEnd, typedOther.dateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(typedOther.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.area, typedOther.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsp()).compareTo(typedOther.isSetIsp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsp()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.isp, typedOther.isp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuota()).compareTo(typedOther.isSetQuota());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuota()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.quota, typedOther.quota);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHigh()).compareTo(typedOther.isSetHigh());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHigh()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.high, typedOther.high);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLow()).compareTo(typedOther.isSetLow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLow()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.low, typedOther.low);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonFilterType()).compareTo(typedOther.isSetMonFilterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonFilterType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.monFilterType, typedOther.monFilterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonFilterIp()).compareTo(typedOther.isSetMonFilterIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonFilterIp()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.monFilterIp, typedOther.monFilterIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetFilterType()).compareTo(typedOther.isSetTargetFilterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetFilterType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.targetFilterType, typedOther.targetFilterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetFilterIp()).compareTo(typedOther.isSetTargetFilterIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetFilterIp()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.targetFilterIp, typedOther.targetFilterIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoFill()).compareTo(typedOther.isSetAutoFill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoFill()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.autoFill, typedOther.autoFill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskDomain()).compareTo(typedOther.isSetTaskDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskDomain()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskDomain, typedOther.taskDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSource()).compareTo(typedOther.isSetIsSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSource()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.isSource, typedOther.isSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDectId()).compareTo(typedOther.isSetDectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDectId()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.dectId, typedOther.dectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskGroupType()).compareTo(typedOther.isSetTaskGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupType, typedOther.taskGroupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeRange()).compareTo(typedOther.isSetTimeRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeRange()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.timeRange, typedOther.timeRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryParam(");
    boolean first = true;

    sb.append("taskIds:");
    if (this.taskIds == null) {
      sb.append("null");
    } else {
      sb.append(this.taskIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateBegin:");
    if (this.dateBegin == null) {
      sb.append("null");
    } else {
      sb.append(this.dateBegin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateEnd:");
    if (this.dateEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.dateEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    if (this.area == null) {
      sb.append("null");
    } else {
      sb.append(this.area);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isp:");
    if (this.isp == null) {
      sb.append("null");
    } else {
      sb.append(this.isp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quota:");
    if (this.quota == null) {
      sb.append("null");
    } else {
      sb.append(this.quota);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("high:");
    if (this.high == null) {
      sb.append("null");
    } else {
      sb.append(this.high);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("low:");
    if (this.low == null) {
      sb.append("null");
    } else {
      sb.append(this.low);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monFilterType:");
    if (this.monFilterType == null) {
      sb.append("null");
    } else {
      sb.append(this.monFilterType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monFilterIp:");
    if (this.monFilterIp == null) {
      sb.append("null");
    } else {
      sb.append(this.monFilterIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetFilterType:");
    if (this.targetFilterType == null) {
      sb.append("null");
    } else {
      sb.append(this.targetFilterType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetFilterIp:");
    if (this.targetFilterIp == null) {
      sb.append("null");
    } else {
      sb.append(this.targetFilterIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoFill:");
    sb.append(this.autoFill);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskDomain:");
    if (this.taskDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.taskDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSource:");
    if (this.isSource == null) {
      sb.append("null");
    } else {
      sb.append(this.isSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dectId:");
    if (this.dectId == null) {
      sb.append("null");
    } else {
      sb.append(this.dectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskGroupType:");
    if (this.taskGroupType == null) {
      sb.append("null");
    } else {
      sb.append(this.taskGroupType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeRange:");
    sb.append(this.timeRange);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate()  {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryParamStandardSchemeFactory implements SchemeFactory {
    public QueryParamStandardScheme getScheme() {
      return new QueryParamStandardScheme();
    }
  }

  private static class QueryParamStandardScheme extends StandardScheme<QueryParam> {

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, QueryParam struct)  {
      com.cnc.dna.platform.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_IDS
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskIds = iprot.readString();
              struct.setTaskIdsIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE_BEGIN
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.dateBegin = iprot.readString();
              struct.setDateBeginIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_END
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.dateEnd = iprot.readString();
              struct.setDateEndIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREA
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.area = iprot.readString();
              struct.setAreaIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISP
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.isp = iprot.readString();
              struct.setIspIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUOTA
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.quota = iprot.readString();
              struct.setQuotaIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HIGH
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.high = iprot.readString();
              struct.setHighIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOW
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.low = iprot.readString();
              struct.setLowIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MON_FILTER_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.monFilterType = iprot.readString();
              struct.setMonFilterTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MON_FILTER_IP
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.monFilterIp = iprot.readString();
              struct.setMonFilterIpIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TARGET_FILTER_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.targetFilterType = iprot.readString();
              struct.setTargetFilterTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TARGET_FILTER_IP
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.targetFilterIp = iprot.readString();
              struct.setTargetFilterIpIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AUTO_FILL
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.BOOL) {
              struct.autoFill = iprot.readBool();
              struct.setAutoFillIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TASK_DOMAIN
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskDomain = iprot.readString();
              struct.setTaskDomainIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_SOURCE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.isSource = iprot.readString();
              struct.setIsSourceIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DECT_ID
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.dectId = iprot.readString();
              struct.setDectIdIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TASK_GROUP_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.taskGroupType = TaskGroupType.findByValue(iprot.readI32());
              struct.setTaskGroupTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TIME_RANGE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.timeRange = iprot.readI32();
              struct.setTimeRangeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, QueryParam struct)  {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskIds != null) {
        oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
        oprot.writeString(struct.taskIds);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.dateBegin != null) {
        oprot.writeFieldBegin(DATE_BEGIN_FIELD_DESC);
        oprot.writeString(struct.dateBegin);
        oprot.writeFieldEnd();
      }
      if (struct.dateEnd != null) {
        oprot.writeFieldBegin(DATE_END_FIELD_DESC);
        oprot.writeString(struct.dateEnd);
        oprot.writeFieldEnd();
      }
      if (struct.area != null) {
        oprot.writeFieldBegin(AREA_FIELD_DESC);
        oprot.writeString(struct.area);
        oprot.writeFieldEnd();
      }
      if (struct.isp != null) {
        oprot.writeFieldBegin(ISP_FIELD_DESC);
        oprot.writeString(struct.isp);
        oprot.writeFieldEnd();
      }
      if (struct.quota != null) {
        oprot.writeFieldBegin(QUOTA_FIELD_DESC);
        oprot.writeString(struct.quota);
        oprot.writeFieldEnd();
      }
      if (struct.high != null) {
        oprot.writeFieldBegin(HIGH_FIELD_DESC);
        oprot.writeString(struct.high);
        oprot.writeFieldEnd();
      }
      if (struct.low != null) {
        oprot.writeFieldBegin(LOW_FIELD_DESC);
        oprot.writeString(struct.low);
        oprot.writeFieldEnd();
      }
      if (struct.monFilterType != null) {
        oprot.writeFieldBegin(MON_FILTER_TYPE_FIELD_DESC);
        oprot.writeString(struct.monFilterType);
        oprot.writeFieldEnd();
      }
      if (struct.monFilterIp != null) {
        oprot.writeFieldBegin(MON_FILTER_IP_FIELD_DESC);
        oprot.writeString(struct.monFilterIp);
        oprot.writeFieldEnd();
      }
      if (struct.targetFilterType != null) {
        oprot.writeFieldBegin(TARGET_FILTER_TYPE_FIELD_DESC);
        oprot.writeString(struct.targetFilterType);
        oprot.writeFieldEnd();
      }
      if (struct.targetFilterIp != null) {
        oprot.writeFieldBegin(TARGET_FILTER_IP_FIELD_DESC);
        oprot.writeString(struct.targetFilterIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTO_FILL_FIELD_DESC);
      oprot.writeBool(struct.autoFill);
      oprot.writeFieldEnd();
      if (struct.taskDomain != null) {
        oprot.writeFieldBegin(TASK_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.taskDomain);
        oprot.writeFieldEnd();
      }
      if (struct.isSource != null) {
        oprot.writeFieldBegin(IS_SOURCE_FIELD_DESC);
        oprot.writeString(struct.isSource);
        oprot.writeFieldEnd();
      }
      if (struct.dectId != null) {
        oprot.writeFieldBegin(DECT_ID_FIELD_DESC);
        oprot.writeString(struct.dectId);
        oprot.writeFieldEnd();
      }
      if (struct.taskGroupType != null) {
        oprot.writeFieldBegin(TASK_GROUP_TYPE_FIELD_DESC);
        oprot.writeI32(struct.taskGroupType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_RANGE_FIELD_DESC);
      oprot.writeI32(struct.timeRange);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryParamTupleSchemeFactory implements SchemeFactory {
    public QueryParamTupleScheme getScheme() {
      return new QueryParamTupleScheme();
    }
  }

  private static class QueryParamTupleScheme extends TupleScheme<QueryParam> {

    @Override
    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, QueryParam struct)  {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskIds()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetDateBegin()) {
        optionals.set(2);
      }
      if (struct.isSetDateEnd()) {
        optionals.set(3);
      }
      if (struct.isSetArea()) {
        optionals.set(4);
      }
      if (struct.isSetIsp()) {
        optionals.set(5);
      }
      if (struct.isSetQuota()) {
        optionals.set(6);
      }
      if (struct.isSetHigh()) {
        optionals.set(7);
      }
      if (struct.isSetLow()) {
        optionals.set(8);
      }
      if (struct.isSetMonFilterType()) {
        optionals.set(9);
      }
      if (struct.isSetMonFilterIp()) {
        optionals.set(10);
      }
      if (struct.isSetTargetFilterType()) {
        optionals.set(11);
      }
      if (struct.isSetTargetFilterIp()) {
        optionals.set(12);
      }
      if (struct.isSetAutoFill()) {
        optionals.set(13);
      }
      if (struct.isSetTaskDomain()) {
        optionals.set(14);
      }
      if (struct.isSetIsSource()) {
        optionals.set(15);
      }
      if (struct.isSetDectId()) {
        optionals.set(16);
      }
      if (struct.isSetTaskGroupType()) {
        optionals.set(17);
      }
      if (struct.isSetTimeRange()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetTaskIds()) {
        oprot.writeString(struct.taskIds);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetDateBegin()) {
        oprot.writeString(struct.dateBegin);
      }
      if (struct.isSetDateEnd()) {
        oprot.writeString(struct.dateEnd);
      }
      if (struct.isSetArea()) {
        oprot.writeString(struct.area);
      }
      if (struct.isSetIsp()) {
        oprot.writeString(struct.isp);
      }
      if (struct.isSetQuota()) {
        oprot.writeString(struct.quota);
      }
      if (struct.isSetHigh()) {
        oprot.writeString(struct.high);
      }
      if (struct.isSetLow()) {
        oprot.writeString(struct.low);
      }
      if (struct.isSetMonFilterType()) {
        oprot.writeString(struct.monFilterType);
      }
      if (struct.isSetMonFilterIp()) {
        oprot.writeString(struct.monFilterIp);
      }
      if (struct.isSetTargetFilterType()) {
        oprot.writeString(struct.targetFilterType);
      }
      if (struct.isSetTargetFilterIp()) {
        oprot.writeString(struct.targetFilterIp);
      }
      if (struct.isSetAutoFill()) {
        oprot.writeBool(struct.autoFill);
      }
      if (struct.isSetTaskDomain()) {
        oprot.writeString(struct.taskDomain);
      }
      if (struct.isSetIsSource()) {
        oprot.writeString(struct.isSource);
      }
      if (struct.isSetDectId()) {
        oprot.writeString(struct.dectId);
      }
      if (struct.isSetTaskGroupType()) {
        oprot.writeI32(struct.taskGroupType.getValue());
      }
      if (struct.isSetTimeRange()) {
        oprot.writeI32(struct.timeRange);
      }
    }

    @Override
    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, QueryParam struct)  {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.taskIds = iprot.readString();
        struct.setTaskIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dateBegin = iprot.readString();
        struct.setDateBeginIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateEnd = iprot.readString();
        struct.setDateEndIsSet(true);
      }
      if (incoming.get(4)) {
        struct.area = iprot.readString();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isp = iprot.readString();
        struct.setIspIsSet(true);
      }
      if (incoming.get(6)) {
        struct.quota = iprot.readString();
        struct.setQuotaIsSet(true);
      }
      if (incoming.get(7)) {
        struct.high = iprot.readString();
        struct.setHighIsSet(true);
      }
      if (incoming.get(8)) {
        struct.low = iprot.readString();
        struct.setLowIsSet(true);
      }
      if (incoming.get(9)) {
        struct.monFilterType = iprot.readString();
        struct.setMonFilterTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.monFilterIp = iprot.readString();
        struct.setMonFilterIpIsSet(true);
      }
      if (incoming.get(11)) {
        struct.targetFilterType = iprot.readString();
        struct.setTargetFilterTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.targetFilterIp = iprot.readString();
        struct.setTargetFilterIpIsSet(true);
      }
      if (incoming.get(13)) {
        struct.autoFill = iprot.readBool();
        struct.setAutoFillIsSet(true);
      }
      if (incoming.get(14)) {
        struct.taskDomain = iprot.readString();
        struct.setTaskDomainIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isSource = iprot.readString();
        struct.setIsSourceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.dectId = iprot.readString();
        struct.setDectIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.taskGroupType = TaskGroupType.findByValue(iprot.readI32());
        struct.setTaskGroupTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.timeRange = iprot.readI32();
        struct.setTimeRangeIsSet(true);
      }
    }
  }

}

