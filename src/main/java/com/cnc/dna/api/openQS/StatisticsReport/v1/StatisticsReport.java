/**
 * Autogenerated by Thrift Compiler (DNA Version, Base 0.90.0)
 *
 *  @CDN Department. ChinaNetCenter 2014
 */
package com.cnc.dna.api.openQS.StatisticsReport.v1;

import com.cnc.dna.platform.thrift.scheme.IScheme;
import com.cnc.dna.platform.thrift.scheme.SchemeFactory;
import com.cnc.dna.platform.thrift.scheme.StandardScheme;

import com.cnc.dna.platform.thrift.scheme.TupleScheme;
import com.cnc.dna.platform.thrift.protocol.TTupleProtocol;
import com.cnc.dna.platform.thrift.protocol.TProtocolException;
import com.cnc.dna.platform.thrift.EncodingUtils;
import com.cnc.dna.platform.thrift.TException;
import com.cnc.dna.platform.rpc.spi.context.IdlInvocation;
import com.cnc.dna.platform.rpc.spi.context.IdlResult;
import com.cnc.dna.platform.rpc.Handler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatisticsReport {

  public interface Iface {

    public ApiResult query(String appcode, QueryParam param) ;

  }

  public interface DNAClient {

    public queryInvocation query(String appcode, QueryParam param) ;

  }

  public interface DNAHandler extends Handler {

    public void query(queryInvocation invocation, queryResult result) ;

  }

  public static class queryInvocation extends IdlInvocation<queryInvocation, queryResult> {

    public queryInvocation() {
    }
    public queryInvocation(String appcode, QueryParam param) {
      super.setArguments(appcode, param);
    }
    public String getAppcode() {
      return this.getArgument(0);
    }
    public QueryParam getParam() {
      return this.getArgument(1);
    }
  }

  public static class queryResult extends IdlResult<ApiResult> {

  }

  private static class query_args implements com.cnc.dna.platform.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("query_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField APPCODE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("appcode", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PARAM_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("param", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    private String appcode; // required
    private QueryParam param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      APPCODE((short)1, "appcode"),
      PARAM((short)2, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPCODE
            return APPCODE;
          case 2: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPCODE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("appcode", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.APPCODE);
      tmpMap.put(_Fields.PARAM, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("param", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, QueryParam.class)));
      fieldList.add(_Fields.PARAM);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public query_args() {
    }

    public query_args(
      String appcode,
      QueryParam param)
    {
      this();
      this.appcode = appcode;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetAppcode()) {
        this.appcode = other.appcode;
      }
      if (other.isSetParam()) {
        this.param = new QueryParam(other.param);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.appcode = null;
      this.param = null;
    }

    public String getAppcode() {
      return this.appcode;
    }

    public void setAppcode(String appcode) {
      this.appcode = appcode;
    }

    public void unsetAppcode() {
      this.appcode = null;
    }

    /** Returns true if field appcode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppcode() {
      return this.appcode != null;
    }

    public void setAppcodeIsSet(boolean value) {
      if (!value) {
        this.appcode = null;
      }
    }

    public QueryParam getParam() {
      return this.param;
    }

    public void setParam(QueryParam param) {
      this.param = param;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPCODE:
        if (value == null) {
          unsetAppcode();
        } else {
          setAppcode((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((QueryParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPCODE:
        return getAppcode();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPCODE:
        return isSetAppcode();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_appcode = true && this.isSetAppcode();
      boolean that_present_appcode = true && that.isSetAppcode();
      if (this_present_appcode || that_present_appcode) {
        if (!(this_present_appcode && that_present_appcode))
          return false;
        if (!this.appcode.equals(that.appcode))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_args typedOther = (query_args)other;

      lastComparison = Boolean.valueOf(isSetAppcode()).compareTo(typedOther.isSetAppcode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppcode()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.appcode, typedOther.appcode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("appcode:");
      if (this.appcode == null) {
        sb.append("null");
      } else {
        sb.append(this.appcode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, query_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPCODE
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.appcode = iprot.readString();
                struct.setAppcodeIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAM
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.param = new QueryParam();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, query_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appcode != null) {
          oprot.writeFieldBegin(APPCODE_FIELD_DESC);
          oprot.writeString(struct.appcode);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, query_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppcode()) {
          optionals.set(0);
        }
        if (struct.isSetParam()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAppcode()) {
          oprot.writeString(struct.appcode);
        }
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, query_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.appcode = iprot.readString();
          struct.setAppcodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.param = new QueryParam();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

  }

  private static class query_result implements com.cnc.dna.platform.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("query_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public query_result() {
    }

    public query_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_result typedOther = (query_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, query_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, query_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, query_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, query_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
