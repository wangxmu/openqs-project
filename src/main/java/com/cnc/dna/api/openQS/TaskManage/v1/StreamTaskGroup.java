/**
 * Autogenerated by Thrift Compiler (DNA Version, Base 0.90.0)
 *
 *  @CDN Department. ChinaNetCenter 2014
 */
package com.cnc.dna.api.openQS.TaskManage.v1;

import com.cnc.dna.platform.thrift.scheme.IScheme;
import com.cnc.dna.platform.thrift.scheme.SchemeFactory;
import com.cnc.dna.platform.thrift.scheme.StandardScheme;

import com.cnc.dna.platform.thrift.scheme.TupleScheme;
import com.cnc.dna.platform.thrift.protocol.TTupleProtocol;
import com.cnc.dna.platform.thrift.protocol.TProtocolException;
import com.cnc.dna.platform.thrift.EncodingUtils;
import com.cnc.dna.platform.thrift.TException;
import com.cnc.dna.platform.rpc.spi.context.IdlInvocation;
import com.cnc.dna.platform.rpc.spi.context.IdlResult;
import com.cnc.dna.platform.rpc.Handler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamTaskGroup implements com.cnc.dna.platform.thrift.TBase<StreamTaskGroup, StreamTaskGroup._Fields>, java.io.Serializable, Cloneable {
  private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("StreamTaskGroup");

  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_ID_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupId", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupType", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)2);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_NAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupName", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)3);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_LIST_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskList", com.cnc.dna.platform.thrift.protocol.TType.LIST, (short)4);
  private static final com.cnc.dna.platform.thrift.protocol.TField BEGIN_DATE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("beginDate", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)5);
  private static final com.cnc.dna.platform.thrift.protocol.TField END_DATE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("endDate", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)6);
  private static final com.cnc.dna.platform.thrift.protocol.TField INTERVAL_TIME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("intervalTime", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)7);
  private static final com.cnc.dna.platform.thrift.protocol.TField STATUS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("status", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)8);
  private static final com.cnc.dna.platform.thrift.protocol.TField REMARK_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("remark", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)9);
  private static final com.cnc.dna.platform.thrift.protocol.TField TIME_OUT_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("timeOut", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)10);
  private static final com.cnc.dna.platform.thrift.protocol.TField FIRST_CACHE_TIME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("firstCacheTime", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)11);
  private static final com.cnc.dna.platform.thrift.protocol.TField PLAY_TIME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("playTime", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)12);
  private static final com.cnc.dna.platform.thrift.protocol.TField PING_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("ping", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)13);
  private static final com.cnc.dna.platform.thrift.protocol.TField NSLOOKUP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("nslookup", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)14);
  private static final com.cnc.dna.platform.thrift.protocol.TField TRACE_ROUTE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("traceRoute", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)15);
  private static final com.cnc.dna.platform.thrift.protocol.TField PAGE_URL_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("pageUrl", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)16);
  private static final com.cnc.dna.platform.thrift.protocol.TField MONITOR_EXCLUDE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("monitorExclude", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)17);
  private static final com.cnc.dna.platform.thrift.protocol.TField NODE_GROUP_NAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("nodeGroupName", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)18);
  private static final com.cnc.dna.platform.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("timeZone", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StreamTaskGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StreamTaskGroupTupleSchemeFactory());
  }

  private String taskGroupId; // required
  private int taskGroupType; // required
  private String taskGroupName; // required
  private List<StreamTask> taskList; // required
  private String beginDate; // required
  private String endDate; // required
  private int intervalTime; // required
  private int status; // required
  private String remark; // required
  private int timeOut; // required
  private int firstCacheTime; // required
  private int playTime; // required
  private int ping; // required
  private int nslookup; // required
  private int traceRoute; // required
  private String pageUrl; // required
  private String monitorExclude; // required
  private String nodeGroupName; // required
  private int timeZone; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
    TASK_GROUP_ID((short)1, "taskGroupId"),
    TASK_GROUP_TYPE((short)2, "taskGroupType"),
    TASK_GROUP_NAME((short)3, "taskGroupName"),
    TASK_LIST((short)4, "taskList"),
    BEGIN_DATE((short)5, "beginDate"),
    END_DATE((short)6, "endDate"),
    INTERVAL_TIME((short)7, "intervalTime"),
    STATUS((short)8, "status"),
    REMARK((short)9, "remark"),
    TIME_OUT((short)10, "timeOut"),
    FIRST_CACHE_TIME((short)11, "firstCacheTime"),
    PLAY_TIME((short)12, "playTime"),
    PING((short)13, "ping"),
    NSLOOKUP((short)14, "nslookup"),
    TRACE_ROUTE((short)15, "traceRoute"),
    PAGE_URL((short)16, "pageUrl"),
    MONITOR_EXCLUDE((short)17, "monitorExclude"),
    NODE_GROUP_NAME((short)18, "nodeGroupName"),
    TIME_ZONE((short)19, "timeZone");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_GROUP_ID
          return TASK_GROUP_ID;
        case 2: // TASK_GROUP_TYPE
          return TASK_GROUP_TYPE;
        case 3: // TASK_GROUP_NAME
          return TASK_GROUP_NAME;
        case 4: // TASK_LIST
          return TASK_LIST;
        case 5: // BEGIN_DATE
          return BEGIN_DATE;
        case 6: // END_DATE
          return END_DATE;
        case 7: // INTERVAL_TIME
          return INTERVAL_TIME;
        case 8: // STATUS
          return STATUS;
        case 9: // REMARK
          return REMARK;
        case 10: // TIME_OUT
          return TIME_OUT;
        case 11: // FIRST_CACHE_TIME
          return FIRST_CACHE_TIME;
        case 12: // PLAY_TIME
          return PLAY_TIME;
        case 13: // PING
          return PING;
        case 14: // NSLOOKUP
          return NSLOOKUP;
        case 15: // TRACE_ROUTE
          return TRACE_ROUTE;
        case 16: // PAGE_URL
          return PAGE_URL;
        case 17: // MONITOR_EXCLUDE
          return MONITOR_EXCLUDE;
        case 18: // NODE_GROUP_NAME
          return NODE_GROUP_NAME;
        case 19: // TIME_ZONE
          return TIME_ZONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKGROUPTYPE_ISSET_ID = 0;
  private static final int __INTERVALTIME_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __TIMEOUT_ISSET_ID = 3;
  private static final int __FIRSTCACHETIME_ISSET_ID = 4;
  private static final int __PLAYTIME_ISSET_ID = 5;
  private static final int __PING_ISSET_ID = 6;
  private static final int __NSLOOKUP_ISSET_ID = 7;
  private static final int __TRACEROUTE_ISSET_ID = 8;
  private static final int __TIMEZONE_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
  public static final List<_Fields> fieldList = new ArrayList();
  static {
    Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_GROUP_ID, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupId", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_GROUP_ID);
    tmpMap.put(_Fields.TASK_GROUP_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TASK_GROUP_TYPE);
    tmpMap.put(_Fields.TASK_GROUP_NAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupName", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_GROUP_NAME);
    tmpMap.put(_Fields.TASK_LIST, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskList", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.ListMetaData(com.cnc.dna.platform.thrift.protocol.TType.LIST, 
            new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, StreamTask.class))));
    fieldList.add(_Fields.TASK_LIST);
    tmpMap.put(_Fields.BEGIN_DATE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("beginDate", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.BEGIN_DATE);
    tmpMap.put(_Fields.END_DATE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("endDate", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.END_DATE);
    tmpMap.put(_Fields.INTERVAL_TIME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("intervalTime", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.INTERVAL_TIME);
    tmpMap.put(_Fields.STATUS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("status", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.STATUS);
    tmpMap.put(_Fields.REMARK, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("remark", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.REMARK);
    tmpMap.put(_Fields.TIME_OUT, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("timeOut", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TIME_OUT);
    tmpMap.put(_Fields.FIRST_CACHE_TIME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("firstCacheTime", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.FIRST_CACHE_TIME);
    tmpMap.put(_Fields.PLAY_TIME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("playTime", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.PLAY_TIME);
    tmpMap.put(_Fields.PING, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("ping", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.PING);
    tmpMap.put(_Fields.NSLOOKUP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("nslookup", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.NSLOOKUP);
    tmpMap.put(_Fields.TRACE_ROUTE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("traceRoute", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TRACE_ROUTE);
    tmpMap.put(_Fields.PAGE_URL, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("pageUrl", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.PAGE_URL);
    tmpMap.put(_Fields.MONITOR_EXCLUDE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("monitorExclude", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.MONITOR_EXCLUDE);
    tmpMap.put(_Fields.NODE_GROUP_NAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("nodeGroupName", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.NODE_GROUP_NAME);
    tmpMap.put(_Fields.TIME_ZONE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("timeZone", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TIME_ZONE);
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StreamTaskGroup.class, metaDataMap);
  }

  public _Fields getFieldByIndex(int index) {
  	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
  public StreamTaskGroup() {
    this.intervalTime = 10;

    this.status = 0;

    this.timeOut = 15;

    this.firstCacheTime = 5;

    this.playTime = 60;

    this.ping = 0;

    this.nslookup = 0;

    this.traceRoute = 0;

    this.timeZone = 8;

  }

  public StreamTaskGroup(
    String taskGroupId,
    int taskGroupType,
    String taskGroupName,
    List<StreamTask> taskList,
    String beginDate,
    String endDate,
    int intervalTime,
    int status,
    String remark,
    int timeOut,
    int firstCacheTime,
    int playTime,
    int ping,
    int nslookup,
    int traceRoute,
    String pageUrl,
    String monitorExclude,
    String nodeGroupName,
    int timeZone)
  {
    this();
    this.taskGroupId = taskGroupId;
    this.taskGroupType = taskGroupType;
    setTaskGroupTypeIsSet(true);
    this.taskGroupName = taskGroupName;
    this.taskList = taskList;
    this.beginDate = beginDate;
    this.endDate = endDate;
    this.intervalTime = intervalTime;
    setIntervalTimeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.remark = remark;
    this.timeOut = timeOut;
    setTimeOutIsSet(true);
    this.firstCacheTime = firstCacheTime;
    setFirstCacheTimeIsSet(true);
    this.playTime = playTime;
    setPlayTimeIsSet(true);
    this.ping = ping;
    setPingIsSet(true);
    this.nslookup = nslookup;
    setNslookupIsSet(true);
    this.traceRoute = traceRoute;
    setTraceRouteIsSet(true);
    this.pageUrl = pageUrl;
    this.monitorExclude = monitorExclude;
    this.nodeGroupName = nodeGroupName;
    this.timeZone = timeZone;
    setTimeZoneIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StreamTaskGroup(StreamTaskGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskGroupId()) {
      this.taskGroupId = other.taskGroupId;
    }
    this.taskGroupType = other.taskGroupType;
    if (other.isSetTaskGroupName()) {
      this.taskGroupName = other.taskGroupName;
    }
    if (other.isSetTaskList()) {
      List<StreamTask> __this__taskList = new ArrayList<StreamTask>();
      for (StreamTask other_element : other.taskList) {
        __this__taskList.add(new StreamTask(other_element));
      }
      this.taskList = __this__taskList;
    }
    if (other.isSetBeginDate()) {
      this.beginDate = other.beginDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.intervalTime = other.intervalTime;
    this.status = other.status;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.timeOut = other.timeOut;
    this.firstCacheTime = other.firstCacheTime;
    this.playTime = other.playTime;
    this.ping = other.ping;
    this.nslookup = other.nslookup;
    this.traceRoute = other.traceRoute;
    if (other.isSetPageUrl()) {
      this.pageUrl = other.pageUrl;
    }
    if (other.isSetMonitorExclude()) {
      this.monitorExclude = other.monitorExclude;
    }
    if (other.isSetNodeGroupName()) {
      this.nodeGroupName = other.nodeGroupName;
    }
    this.timeZone = other.timeZone;
  }

  public StreamTaskGroup deepCopy() {
    return new StreamTaskGroup(this);
  }

  @Override
  public void clear() {
    this.taskGroupId = null;
    setTaskGroupTypeIsSet(false);
    this.taskGroupType = 0;
    this.taskGroupName = null;
    this.taskList = null;
    this.beginDate = null;
    this.endDate = null;
    this.intervalTime = 10;

    this.status = 0;

    this.remark = null;
    this.timeOut = 15;

    this.firstCacheTime = 5;

    this.playTime = 60;

    this.ping = 0;

    this.nslookup = 0;

    this.traceRoute = 0;

    this.pageUrl = null;
    this.monitorExclude = null;
    this.nodeGroupName = null;
    this.timeZone = 8;

  }

  public String getTaskGroupId() {
    return this.taskGroupId;
  }

  public void setTaskGroupId(String taskGroupId) {
    this.taskGroupId = taskGroupId;
  }

  public void unsetTaskGroupId() {
    this.taskGroupId = null;
  }

  /** Returns true if field taskGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupId() {
    return this.taskGroupId != null;
  }

  public void setTaskGroupIdIsSet(boolean value) {
    if (!value) {
      this.taskGroupId = null;
    }
  }

  public int getTaskGroupType() {
    return this.taskGroupType;
  }

  public void setTaskGroupType(int taskGroupType) {
    this.taskGroupType = taskGroupType;
    setTaskGroupTypeIsSet(true);
  }

  public void unsetTaskGroupType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKGROUPTYPE_ISSET_ID);
  }

  /** Returns true if field taskGroupType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupType() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKGROUPTYPE_ISSET_ID);
  }

  public void setTaskGroupTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKGROUPTYPE_ISSET_ID, value);
  }

  public String getTaskGroupName() {
    return this.taskGroupName;
  }

  public void setTaskGroupName(String taskGroupName) {
    this.taskGroupName = taskGroupName;
  }

  public void unsetTaskGroupName() {
    this.taskGroupName = null;
  }

  /** Returns true if field taskGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupName() {
    return this.taskGroupName != null;
  }

  public void setTaskGroupNameIsSet(boolean value) {
    if (!value) {
      this.taskGroupName = null;
    }
  }

  public int getTaskListSize() {
    return (this.taskList == null) ? 0 : this.taskList.size();
  }

  public java.util.Iterator<StreamTask> getTaskListIterator() {
    return (this.taskList == null) ? null : this.taskList.iterator();
  }

  public void addToTaskList(StreamTask elem) {
    if (this.taskList == null) {
      this.taskList = new ArrayList<StreamTask>();
    }
    this.taskList.add(elem);
  }

  public List<StreamTask> getTaskList() {
    return this.taskList;
  }

  public void setTaskList(List<StreamTask> taskList) {
    this.taskList = taskList;
  }

  public void unsetTaskList() {
    this.taskList = null;
  }

  /** Returns true if field taskList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskList() {
    return this.taskList != null;
  }

  public void setTaskListIsSet(boolean value) {
    if (!value) {
      this.taskList = null;
    }
  }

  public String getBeginDate() {
    return this.beginDate;
  }

  public void setBeginDate(String beginDate) {
    this.beginDate = beginDate;
  }

  public void unsetBeginDate() {
    this.beginDate = null;
  }

  /** Returns true if field beginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginDate() {
    return this.beginDate != null;
  }

  public void setBeginDateIsSet(boolean value) {
    if (!value) {
      this.beginDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getIntervalTime() {
    return this.intervalTime;
  }

  public void setIntervalTime(int intervalTime) {
    this.intervalTime = intervalTime;
    setIntervalTimeIsSet(true);
  }

  public void unsetIntervalTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVALTIME_ISSET_ID);
  }

  /** Returns true if field intervalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIntervalTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVALTIME_ISSET_ID);
  }

  public void setIntervalTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVALTIME_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public void setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getTimeOut() {
    return this.timeOut;
  }

  public void setTimeOut(int timeOut) {
    this.timeOut = timeOut;
    setTimeOutIsSet(true);
  }

  public void unsetTimeOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeOut is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeOut() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public int getFirstCacheTime() {
    return this.firstCacheTime;
  }

  public void setFirstCacheTime(int firstCacheTime) {
    this.firstCacheTime = firstCacheTime;
    setFirstCacheTimeIsSet(true);
  }

  public void unsetFirstCacheTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTCACHETIME_ISSET_ID);
  }

  /** Returns true if field firstCacheTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstCacheTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTCACHETIME_ISSET_ID);
  }

  public void setFirstCacheTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTCACHETIME_ISSET_ID, value);
  }

  public int getPlayTime() {
    return this.playTime;
  }

  public void setPlayTime(int playTime) {
    this.playTime = playTime;
    setPlayTimeIsSet(true);
  }

  public void unsetPlayTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYTIME_ISSET_ID);
  }

  /** Returns true if field playTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayTime() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYTIME_ISSET_ID);
  }

  public void setPlayTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYTIME_ISSET_ID, value);
  }

  public int getPing() {
    return this.ping;
  }

  public void setPing(int ping) {
    this.ping = ping;
    setPingIsSet(true);
  }

  public void unsetPing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PING_ISSET_ID);
  }

  /** Returns true if field ping is set (has been assigned a value) and false otherwise */
  public boolean isSetPing() {
    return EncodingUtils.testBit(__isset_bitfield, __PING_ISSET_ID);
  }

  public void setPingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PING_ISSET_ID, value);
  }

  public int getNslookup() {
    return this.nslookup;
  }

  public void setNslookup(int nslookup) {
    this.nslookup = nslookup;
    setNslookupIsSet(true);
  }

  public void unsetNslookup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NSLOOKUP_ISSET_ID);
  }

  /** Returns true if field nslookup is set (has been assigned a value) and false otherwise */
  public boolean isSetNslookup() {
    return EncodingUtils.testBit(__isset_bitfield, __NSLOOKUP_ISSET_ID);
  }

  public void setNslookupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NSLOOKUP_ISSET_ID, value);
  }

  public int getTraceRoute() {
    return this.traceRoute;
  }

  public void setTraceRoute(int traceRoute) {
    this.traceRoute = traceRoute;
    setTraceRouteIsSet(true);
  }

  public void unsetTraceRoute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACEROUTE_ISSET_ID);
  }

  /** Returns true if field traceRoute is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceRoute() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACEROUTE_ISSET_ID);
  }

  public void setTraceRouteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACEROUTE_ISSET_ID, value);
  }

  public String getPageUrl() {
    return this.pageUrl;
  }

  public void setPageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
  }

  public void unsetPageUrl() {
    this.pageUrl = null;
  }

  /** Returns true if field pageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPageUrl() {
    return this.pageUrl != null;
  }

  public void setPageUrlIsSet(boolean value) {
    if (!value) {
      this.pageUrl = null;
    }
  }

  public String getMonitorExclude() {
    return this.monitorExclude;
  }

  public void setMonitorExclude(String monitorExclude) {
    this.monitorExclude = monitorExclude;
  }

  public void unsetMonitorExclude() {
    this.monitorExclude = null;
  }

  /** Returns true if field monitorExclude is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorExclude() {
    return this.monitorExclude != null;
  }

  public void setMonitorExcludeIsSet(boolean value) {
    if (!value) {
      this.monitorExclude = null;
    }
  }

  public String getNodeGroupName() {
    return this.nodeGroupName;
  }

  public void setNodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
  }

  public void unsetNodeGroupName() {
    this.nodeGroupName = null;
  }

  /** Returns true if field nodeGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeGroupName() {
    return this.nodeGroupName != null;
  }

  public void setNodeGroupNameIsSet(boolean value) {
    if (!value) {
      this.nodeGroupName = null;
    }
  }

  public int getTimeZone() {
    return this.timeZone;
  }

  public void setTimeZone(int timeZone) {
    this.timeZone = timeZone;
    setTimeZoneIsSet(true);
  }

  public void unsetTimeZone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEZONE_ISSET_ID);
  }

  /** Returns true if field timeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEZONE_ISSET_ID);
  }

  public void setTimeZoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEZONE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_GROUP_ID:
      if (value == null) {
        unsetTaskGroupId();
      } else {
        setTaskGroupId((String)value);
      }
      break;

    case TASK_GROUP_TYPE:
      if (value == null) {
        unsetTaskGroupType();
      } else {
        setTaskGroupType((Integer)value);
      }
      break;

    case TASK_GROUP_NAME:
      if (value == null) {
        unsetTaskGroupName();
      } else {
        setTaskGroupName((String)value);
      }
      break;

    case TASK_LIST:
      if (value == null) {
        unsetTaskList();
      } else {
        setTaskList((List<StreamTask>)value);
      }
      break;

    case BEGIN_DATE:
      if (value == null) {
        unsetBeginDate();
      } else {
        setBeginDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case INTERVAL_TIME:
      if (value == null) {
        unsetIntervalTime();
      } else {
        setIntervalTime((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case TIME_OUT:
      if (value == null) {
        unsetTimeOut();
      } else {
        setTimeOut((Integer)value);
      }
      break;

    case FIRST_CACHE_TIME:
      if (value == null) {
        unsetFirstCacheTime();
      } else {
        setFirstCacheTime((Integer)value);
      }
      break;

    case PLAY_TIME:
      if (value == null) {
        unsetPlayTime();
      } else {
        setPlayTime((Integer)value);
      }
      break;

    case PING:
      if (value == null) {
        unsetPing();
      } else {
        setPing((Integer)value);
      }
      break;

    case NSLOOKUP:
      if (value == null) {
        unsetNslookup();
      } else {
        setNslookup((Integer)value);
      }
      break;

    case TRACE_ROUTE:
      if (value == null) {
        unsetTraceRoute();
      } else {
        setTraceRoute((Integer)value);
      }
      break;

    case PAGE_URL:
      if (value == null) {
        unsetPageUrl();
      } else {
        setPageUrl((String)value);
      }
      break;

    case MONITOR_EXCLUDE:
      if (value == null) {
        unsetMonitorExclude();
      } else {
        setMonitorExclude((String)value);
      }
      break;

    case NODE_GROUP_NAME:
      if (value == null) {
        unsetNodeGroupName();
      } else {
        setNodeGroupName((String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_GROUP_ID:
      return getTaskGroupId();

    case TASK_GROUP_TYPE:
      return Integer.valueOf(getTaskGroupType());

    case TASK_GROUP_NAME:
      return getTaskGroupName();

    case TASK_LIST:
      return getTaskList();

    case BEGIN_DATE:
      return getBeginDate();

    case END_DATE:
      return getEndDate();

    case INTERVAL_TIME:
      return Integer.valueOf(getIntervalTime());

    case STATUS:
      return Integer.valueOf(getStatus());

    case REMARK:
      return getRemark();

    case TIME_OUT:
      return Integer.valueOf(getTimeOut());

    case FIRST_CACHE_TIME:
      return Integer.valueOf(getFirstCacheTime());

    case PLAY_TIME:
      return Integer.valueOf(getPlayTime());

    case PING:
      return Integer.valueOf(getPing());

    case NSLOOKUP:
      return Integer.valueOf(getNslookup());

    case TRACE_ROUTE:
      return Integer.valueOf(getTraceRoute());

    case PAGE_URL:
      return getPageUrl();

    case MONITOR_EXCLUDE:
      return getMonitorExclude();

    case NODE_GROUP_NAME:
      return getNodeGroupName();

    case TIME_ZONE:
      return Integer.valueOf(getTimeZone());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_GROUP_ID:
      return isSetTaskGroupId();
    case TASK_GROUP_TYPE:
      return isSetTaskGroupType();
    case TASK_GROUP_NAME:
      return isSetTaskGroupName();
    case TASK_LIST:
      return isSetTaskList();
    case BEGIN_DATE:
      return isSetBeginDate();
    case END_DATE:
      return isSetEndDate();
    case INTERVAL_TIME:
      return isSetIntervalTime();
    case STATUS:
      return isSetStatus();
    case REMARK:
      return isSetRemark();
    case TIME_OUT:
      return isSetTimeOut();
    case FIRST_CACHE_TIME:
      return isSetFirstCacheTime();
    case PLAY_TIME:
      return isSetPlayTime();
    case PING:
      return isSetPing();
    case NSLOOKUP:
      return isSetNslookup();
    case TRACE_ROUTE:
      return isSetTraceRoute();
    case PAGE_URL:
      return isSetPageUrl();
    case MONITOR_EXCLUDE:
      return isSetMonitorExclude();
    case NODE_GROUP_NAME:
      return isSetNodeGroupName();
    case TIME_ZONE:
      return isSetTimeZone();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StreamTaskGroup)
      return this.equals((StreamTaskGroup)that);
    return false;
  }

  public boolean equals(StreamTaskGroup that) {
    if (that == null)
      return false;

    boolean this_present_taskGroupId = true && this.isSetTaskGroupId();
    boolean that_present_taskGroupId = true && that.isSetTaskGroupId();
    if (this_present_taskGroupId || that_present_taskGroupId) {
      if (!(this_present_taskGroupId && that_present_taskGroupId))
        return false;
      if (!this.taskGroupId.equals(that.taskGroupId))
        return false;
    }

    boolean this_present_taskGroupType = true;
    boolean that_present_taskGroupType = true;
    if (this_present_taskGroupType || that_present_taskGroupType) {
      if (!(this_present_taskGroupType && that_present_taskGroupType))
        return false;
      if (this.taskGroupType != that.taskGroupType)
        return false;
    }

    boolean this_present_taskGroupName = true && this.isSetTaskGroupName();
    boolean that_present_taskGroupName = true && that.isSetTaskGroupName();
    if (this_present_taskGroupName || that_present_taskGroupName) {
      if (!(this_present_taskGroupName && that_present_taskGroupName))
        return false;
      if (!this.taskGroupName.equals(that.taskGroupName))
        return false;
    }

    boolean this_present_taskList = true && this.isSetTaskList();
    boolean that_present_taskList = true && that.isSetTaskList();
    if (this_present_taskList || that_present_taskList) {
      if (!(this_present_taskList && that_present_taskList))
        return false;
      if (!this.taskList.equals(that.taskList))
        return false;
    }

    boolean this_present_beginDate = true && this.isSetBeginDate();
    boolean that_present_beginDate = true && that.isSetBeginDate();
    if (this_present_beginDate || that_present_beginDate) {
      if (!(this_present_beginDate && that_present_beginDate))
        return false;
      if (!this.beginDate.equals(that.beginDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_intervalTime = true;
    boolean that_present_intervalTime = true;
    if (this_present_intervalTime || that_present_intervalTime) {
      if (!(this_present_intervalTime && that_present_intervalTime))
        return false;
      if (this.intervalTime != that.intervalTime)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_timeOut = true;
    boolean that_present_timeOut = true;
    if (this_present_timeOut || that_present_timeOut) {
      if (!(this_present_timeOut && that_present_timeOut))
        return false;
      if (this.timeOut != that.timeOut)
        return false;
    }

    boolean this_present_firstCacheTime = true;
    boolean that_present_firstCacheTime = true;
    if (this_present_firstCacheTime || that_present_firstCacheTime) {
      if (!(this_present_firstCacheTime && that_present_firstCacheTime))
        return false;
      if (this.firstCacheTime != that.firstCacheTime)
        return false;
    }

    boolean this_present_playTime = true;
    boolean that_present_playTime = true;
    if (this_present_playTime || that_present_playTime) {
      if (!(this_present_playTime && that_present_playTime))
        return false;
      if (this.playTime != that.playTime)
        return false;
    }

    boolean this_present_ping = true;
    boolean that_present_ping = true;
    if (this_present_ping || that_present_ping) {
      if (!(this_present_ping && that_present_ping))
        return false;
      if (this.ping != that.ping)
        return false;
    }

    boolean this_present_nslookup = true;
    boolean that_present_nslookup = true;
    if (this_present_nslookup || that_present_nslookup) {
      if (!(this_present_nslookup && that_present_nslookup))
        return false;
      if (this.nslookup != that.nslookup)
        return false;
    }

    boolean this_present_traceRoute = true;
    boolean that_present_traceRoute = true;
    if (this_present_traceRoute || that_present_traceRoute) {
      if (!(this_present_traceRoute && that_present_traceRoute))
        return false;
      if (this.traceRoute != that.traceRoute)
        return false;
    }

    boolean this_present_pageUrl = true && this.isSetPageUrl();
    boolean that_present_pageUrl = true && that.isSetPageUrl();
    if (this_present_pageUrl || that_present_pageUrl) {
      if (!(this_present_pageUrl && that_present_pageUrl))
        return false;
      if (!this.pageUrl.equals(that.pageUrl))
        return false;
    }

    boolean this_present_monitorExclude = true && this.isSetMonitorExclude();
    boolean that_present_monitorExclude = true && that.isSetMonitorExclude();
    if (this_present_monitorExclude || that_present_monitorExclude) {
      if (!(this_present_monitorExclude && that_present_monitorExclude))
        return false;
      if (!this.monitorExclude.equals(that.monitorExclude))
        return false;
    }

    boolean this_present_nodeGroupName = true && this.isSetNodeGroupName();
    boolean that_present_nodeGroupName = true && that.isSetNodeGroupName();
    if (this_present_nodeGroupName || that_present_nodeGroupName) {
      if (!(this_present_nodeGroupName && that_present_nodeGroupName))
        return false;
      if (!this.nodeGroupName.equals(that.nodeGroupName))
        return false;
    }

    boolean this_present_timeZone = true;
    boolean that_present_timeZone = true;
    if (this_present_timeZone || that_present_timeZone) {
      if (!(this_present_timeZone && that_present_timeZone))
        return false;
      if (this.timeZone != that.timeZone)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StreamTaskGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StreamTaskGroup typedOther = (StreamTaskGroup)other;

    lastComparison = Boolean.valueOf(isSetTaskGroupId()).compareTo(typedOther.isSetTaskGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupId()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupId, typedOther.taskGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskGroupType()).compareTo(typedOther.isSetTaskGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupType, typedOther.taskGroupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskGroupName()).compareTo(typedOther.isSetTaskGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupName()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupName, typedOther.taskGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskList()).compareTo(typedOther.isSetTaskList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskList()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskList, typedOther.taskList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginDate()).compareTo(typedOther.isSetBeginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginDate()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.beginDate, typedOther.beginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntervalTime()).compareTo(typedOther.isSetIntervalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntervalTime()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.intervalTime, typedOther.intervalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeOut()).compareTo(typedOther.isSetTimeOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeOut()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.timeOut, typedOther.timeOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstCacheTime()).compareTo(typedOther.isSetFirstCacheTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstCacheTime()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.firstCacheTime, typedOther.firstCacheTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayTime()).compareTo(typedOther.isSetPlayTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayTime()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.playTime, typedOther.playTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPing()).compareTo(typedOther.isSetPing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPing()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.ping, typedOther.ping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNslookup()).compareTo(typedOther.isSetNslookup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNslookup()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.nslookup, typedOther.nslookup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceRoute()).compareTo(typedOther.isSetTraceRoute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceRoute()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.traceRoute, typedOther.traceRoute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageUrl()).compareTo(typedOther.isSetPageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageUrl()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.pageUrl, typedOther.pageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorExclude()).compareTo(typedOther.isSetMonitorExclude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorExclude()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.monitorExclude, typedOther.monitorExclude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeGroupName()).compareTo(typedOther.isSetNodeGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeGroupName()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.nodeGroupName, typedOther.nodeGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeZone()).compareTo(typedOther.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.timeZone, typedOther.timeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StreamTaskGroup(");
    boolean first = true;

    sb.append("taskGroupId:");
    if (this.taskGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskGroupType:");
    sb.append(this.taskGroupType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskGroupName:");
    if (this.taskGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskGroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskList:");
    if (this.taskList == null) {
      sb.append("null");
    } else {
      sb.append(this.taskList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginDate:");
    if (this.beginDate == null) {
      sb.append("null");
    } else {
      sb.append(this.beginDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intervalTime:");
    sb.append(this.intervalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeOut:");
    sb.append(this.timeOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstCacheTime:");
    sb.append(this.firstCacheTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playTime:");
    sb.append(this.playTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ping:");
    sb.append(this.ping);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nslookup:");
    sb.append(this.nslookup);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceRoute:");
    sb.append(this.traceRoute);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageUrl:");
    if (this.pageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.pageUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorExclude:");
    if (this.monitorExclude == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorExclude);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeGroupName:");
    if (this.nodeGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeGroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeZone:");
    sb.append(this.timeZone);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate()  {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamTaskGroupStandardSchemeFactory implements SchemeFactory {
    public StreamTaskGroupStandardScheme getScheme() {
      return new StreamTaskGroupStandardScheme();
    }
  }

  private static class StreamTaskGroupStandardScheme extends StandardScheme<StreamTaskGroup> {

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, StreamTaskGroup struct)  {
      com.cnc.dna.platform.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_GROUP_ID
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskGroupId = iprot.readString();
              struct.setTaskGroupIdIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_GROUP_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.taskGroupType = iprot.readI32();
              struct.setTaskGroupTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_GROUP_NAME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskGroupName = iprot.readString();
              struct.setTaskGroupNameIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_LIST
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.LIST) {
              {
                com.cnc.dna.platform.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.taskList = new ArrayList<StreamTask>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  StreamTask _elem18; // required
                  _elem18 = new StreamTask();
                  _elem18.read(iprot);
                  struct.taskList.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setTaskListIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_DATE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.beginDate = iprot.readString();
              struct.setBeginDateIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_DATE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTERVAL_TIME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.intervalTime = iprot.readI32();
              struct.setIntervalTimeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_OUT
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.timeOut = iprot.readI32();
              struct.setTimeOutIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIRST_CACHE_TIME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.firstCacheTime = iprot.readI32();
              struct.setFirstCacheTimeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLAY_TIME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.playTime = iprot.readI32();
              struct.setPlayTimeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PING
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.ping = iprot.readI32();
              struct.setPingIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NSLOOKUP
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.nslookup = iprot.readI32();
              struct.setNslookupIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRACE_ROUTE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.traceRoute = iprot.readI32();
              struct.setTraceRouteIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE_URL
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.pageUrl = iprot.readString();
              struct.setPageUrlIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MONITOR_EXCLUDE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.monitorExclude = iprot.readString();
              struct.setMonitorExcludeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NODE_GROUP_NAME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.nodeGroupName = iprot.readString();
              struct.setNodeGroupNameIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TIME_ZONE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.timeZone = iprot.readI32();
              struct.setTimeZoneIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, StreamTaskGroup struct)  {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskGroupId != null) {
        oprot.writeFieldBegin(TASK_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.taskGroupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_GROUP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.taskGroupType);
      oprot.writeFieldEnd();
      if (struct.taskGroupName != null) {
        oprot.writeFieldBegin(TASK_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.taskGroupName);
        oprot.writeFieldEnd();
      }
      if (struct.taskList != null) {
        oprot.writeFieldBegin(TASK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, struct.taskList.size()));
          for (StreamTask _iter19 : struct.taskList)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.beginDate != null) {
        oprot.writeFieldBegin(BEGIN_DATE_FIELD_DESC);
        oprot.writeString(struct.beginDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERVAL_TIME_FIELD_DESC);
      oprot.writeI32(struct.intervalTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_OUT_FIELD_DESC);
      oprot.writeI32(struct.timeOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRST_CACHE_TIME_FIELD_DESC);
      oprot.writeI32(struct.firstCacheTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAY_TIME_FIELD_DESC);
      oprot.writeI32(struct.playTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PING_FIELD_DESC);
      oprot.writeI32(struct.ping);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NSLOOKUP_FIELD_DESC);
      oprot.writeI32(struct.nslookup);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRACE_ROUTE_FIELD_DESC);
      oprot.writeI32(struct.traceRoute);
      oprot.writeFieldEnd();
      if (struct.pageUrl != null) {
        oprot.writeFieldBegin(PAGE_URL_FIELD_DESC);
        oprot.writeString(struct.pageUrl);
        oprot.writeFieldEnd();
      }
      if (struct.monitorExclude != null) {
        oprot.writeFieldBegin(MONITOR_EXCLUDE_FIELD_DESC);
        oprot.writeString(struct.monitorExclude);
        oprot.writeFieldEnd();
      }
      if (struct.nodeGroupName != null) {
        oprot.writeFieldBegin(NODE_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.nodeGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
      oprot.writeI32(struct.timeZone);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamTaskGroupTupleSchemeFactory implements SchemeFactory {
    public StreamTaskGroupTupleScheme getScheme() {
      return new StreamTaskGroupTupleScheme();
    }
  }

  private static class StreamTaskGroupTupleScheme extends TupleScheme<StreamTaskGroup> {

    @Override
    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, StreamTaskGroup struct)  {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskGroupType()) {
        optionals.set(1);
      }
      if (struct.isSetTaskGroupName()) {
        optionals.set(2);
      }
      if (struct.isSetTaskList()) {
        optionals.set(3);
      }
      if (struct.isSetBeginDate()) {
        optionals.set(4);
      }
      if (struct.isSetEndDate()) {
        optionals.set(5);
      }
      if (struct.isSetIntervalTime()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetTimeOut()) {
        optionals.set(9);
      }
      if (struct.isSetFirstCacheTime()) {
        optionals.set(10);
      }
      if (struct.isSetPlayTime()) {
        optionals.set(11);
      }
      if (struct.isSetPing()) {
        optionals.set(12);
      }
      if (struct.isSetNslookup()) {
        optionals.set(13);
      }
      if (struct.isSetTraceRoute()) {
        optionals.set(14);
      }
      if (struct.isSetPageUrl()) {
        optionals.set(15);
      }
      if (struct.isSetMonitorExclude()) {
        optionals.set(16);
      }
      if (struct.isSetNodeGroupName()) {
        optionals.set(17);
      }
      if (struct.isSetTimeZone()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetTaskGroupId()) {
        oprot.writeString(struct.taskGroupId);
      }
      if (struct.isSetTaskGroupType()) {
        oprot.writeI32(struct.taskGroupType);
      }
      if (struct.isSetTaskGroupName()) {
        oprot.writeString(struct.taskGroupName);
      }
      if (struct.isSetTaskList()) {
        {
          oprot.writeI32(struct.taskList.size());
          for (StreamTask _iter20 : struct.taskList)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetBeginDate()) {
        oprot.writeString(struct.beginDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetIntervalTime()) {
        oprot.writeI32(struct.intervalTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetTimeOut()) {
        oprot.writeI32(struct.timeOut);
      }
      if (struct.isSetFirstCacheTime()) {
        oprot.writeI32(struct.firstCacheTime);
      }
      if (struct.isSetPlayTime()) {
        oprot.writeI32(struct.playTime);
      }
      if (struct.isSetPing()) {
        oprot.writeI32(struct.ping);
      }
      if (struct.isSetNslookup()) {
        oprot.writeI32(struct.nslookup);
      }
      if (struct.isSetTraceRoute()) {
        oprot.writeI32(struct.traceRoute);
      }
      if (struct.isSetPageUrl()) {
        oprot.writeString(struct.pageUrl);
      }
      if (struct.isSetMonitorExclude()) {
        oprot.writeString(struct.monitorExclude);
      }
      if (struct.isSetNodeGroupName()) {
        oprot.writeString(struct.nodeGroupName);
      }
      if (struct.isSetTimeZone()) {
        oprot.writeI32(struct.timeZone);
      }
    }

    @Override
    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, StreamTaskGroup struct)  {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.taskGroupId = iprot.readString();
        struct.setTaskGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskGroupType = iprot.readI32();
        struct.setTaskGroupTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taskGroupName = iprot.readString();
        struct.setTaskGroupNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          com.cnc.dna.platform.thrift.protocol.TList _list21 = new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskList = new ArrayList<StreamTask>(_list21.size);
          for (int _i22 = 0; _i22 < _list21.size; ++_i22)
          {
            StreamTask _elem23; // required
            _elem23 = new StreamTask();
            _elem23.read(iprot);
            struct.taskList.add(_elem23);
          }
        }
        struct.setTaskListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginDate = iprot.readString();
        struct.setBeginDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.intervalTime = iprot.readI32();
        struct.setIntervalTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timeOut = iprot.readI32();
        struct.setTimeOutIsSet(true);
      }
      if (incoming.get(10)) {
        struct.firstCacheTime = iprot.readI32();
        struct.setFirstCacheTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.playTime = iprot.readI32();
        struct.setPlayTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.ping = iprot.readI32();
        struct.setPingIsSet(true);
      }
      if (incoming.get(13)) {
        struct.nslookup = iprot.readI32();
        struct.setNslookupIsSet(true);
      }
      if (incoming.get(14)) {
        struct.traceRoute = iprot.readI32();
        struct.setTraceRouteIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pageUrl = iprot.readString();
        struct.setPageUrlIsSet(true);
      }
      if (incoming.get(16)) {
        struct.monitorExclude = iprot.readString();
        struct.setMonitorExcludeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.nodeGroupName = iprot.readString();
        struct.setNodeGroupNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.timeZone = iprot.readI32();
        struct.setTimeZoneIsSet(true);
      }
    }
  }

}

