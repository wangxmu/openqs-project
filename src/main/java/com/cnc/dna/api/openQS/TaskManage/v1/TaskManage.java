/**
 * Autogenerated by Thrift Compiler (DNA Version, Base 0.90.0)
 *
 *  @CDN Department. ChinaNetCenter 2014
 */
package com.cnc.dna.api.openQS.TaskManage.v1;

import com.cnc.dna.platform.thrift.scheme.IScheme;
import com.cnc.dna.platform.thrift.scheme.SchemeFactory;
import com.cnc.dna.platform.thrift.scheme.StandardScheme;

import com.cnc.dna.platform.thrift.scheme.TupleScheme;
import com.cnc.dna.platform.thrift.protocol.TTupleProtocol;
import com.cnc.dna.platform.thrift.protocol.TProtocolException;
import com.cnc.dna.platform.thrift.EncodingUtils;
import com.cnc.dna.platform.thrift.TException;
import com.cnc.dna.platform.rpc.spi.context.IdlInvocation;
import com.cnc.dna.platform.rpc.spi.context.IdlResult;
import com.cnc.dna.platform.rpc.Handler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskManage {

  public interface Iface {

    public ApiResult queryTask(String username, String password, TaskQueryParam param) ;

    public ApiResult updateHttpTask(String username, String password, HttpTaskGroup taskGroup) ;

    public ApiResult updateStreamTask(String username, String password, StreamTaskGroup taskGroup) ;

    public ApiResult updateMobileTask(String username, String password, MobileTaskGroup taskGroup) ;

    public ApiResult updateFullpageTask(String username, String password, FullpageTaskGroup taskGroup) ;

    public ApiResult batchUpdateTaskStatus(String username, String password, TaskGroupType type, int status, List<String> taskGroupIds) ;

  }

  public interface DNAClient {

    public queryTaskInvocation queryTask(String username, String password, TaskQueryParam param) ;

    public updateHttpTaskInvocation updateHttpTask(String username, String password, HttpTaskGroup taskGroup) ;

    public updateStreamTaskInvocation updateStreamTask(String username, String password, StreamTaskGroup taskGroup) ;

    public updateMobileTaskInvocation updateMobileTask(String username, String password, MobileTaskGroup taskGroup) ;

    public updateFullpageTaskInvocation updateFullpageTask(String username, String password, FullpageTaskGroup taskGroup) ;

    public batchUpdateTaskStatusInvocation batchUpdateTaskStatus(String username, String password, TaskGroupType type, int status, List<String> taskGroupIds) ;

  }

  public interface DNAHandler extends Handler {

    public void queryTask(queryTaskInvocation invocation, queryTaskResult result) ;

    public void updateHttpTask(updateHttpTaskInvocation invocation, updateHttpTaskResult result) ;

    public void updateStreamTask(updateStreamTaskInvocation invocation, updateStreamTaskResult result) ;

    public void updateMobileTask(updateMobileTaskInvocation invocation, updateMobileTaskResult result) ;

    public void updateFullpageTask(updateFullpageTaskInvocation invocation, updateFullpageTaskResult result) ;

    public void batchUpdateTaskStatus(batchUpdateTaskStatusInvocation invocation, batchUpdateTaskStatusResult result) ;

  }

  public static class queryTaskInvocation extends IdlInvocation<queryTaskInvocation, queryTaskResult> {

    public queryTaskInvocation() {
    }
    public queryTaskInvocation(String username, String password, TaskQueryParam param) {
      super.setArguments(username, password, param);
    }
    public String getUsername() {
      return this.getArgument(0);
    }
    public String getPassword() {
      return this.getArgument(1);
    }
    public TaskQueryParam getParam() {
      return this.getArgument(2);
    }
  }

  public static class queryTaskResult extends IdlResult<ApiResult> {

  }

  public static class updateHttpTaskInvocation extends IdlInvocation<updateHttpTaskInvocation, updateHttpTaskResult> {

    public updateHttpTaskInvocation() {
    }
    public updateHttpTaskInvocation(String username, String password, HttpTaskGroup taskGroup) {
      super.setArguments(username, password, taskGroup);
    }
    public String getUsername() {
      return this.getArgument(0);
    }
    public String getPassword() {
      return this.getArgument(1);
    }
    public HttpTaskGroup getTaskGroup() {
      return this.getArgument(2);
    }
  }

  public static class updateHttpTaskResult extends IdlResult<ApiResult> {

  }

  public static class updateStreamTaskInvocation extends IdlInvocation<updateStreamTaskInvocation, updateStreamTaskResult> {

    public updateStreamTaskInvocation() {
    }
    public updateStreamTaskInvocation(String username, String password, StreamTaskGroup taskGroup) {
      super.setArguments(username, password, taskGroup);
    }
    public String getUsername() {
      return this.getArgument(0);
    }
    public String getPassword() {
      return this.getArgument(1);
    }
    public StreamTaskGroup getTaskGroup() {
      return this.getArgument(2);
    }
  }

  public static class updateStreamTaskResult extends IdlResult<ApiResult> {

  }

  public static class updateMobileTaskInvocation extends IdlInvocation<updateMobileTaskInvocation, updateMobileTaskResult> {

    public updateMobileTaskInvocation() {
    }
    public updateMobileTaskInvocation(String username, String password, MobileTaskGroup taskGroup) {
      super.setArguments(username, password, taskGroup);
    }
    public String getUsername() {
      return this.getArgument(0);
    }
    public String getPassword() {
      return this.getArgument(1);
    }
    public MobileTaskGroup getTaskGroup() {
      return this.getArgument(2);
    }
  }

  public static class updateMobileTaskResult extends IdlResult<ApiResult> {

  }

  public static class updateFullpageTaskInvocation extends IdlInvocation<updateFullpageTaskInvocation, updateFullpageTaskResult> {

    public updateFullpageTaskInvocation() {
    }
    public updateFullpageTaskInvocation(String username, String password, FullpageTaskGroup taskGroup) {
      super.setArguments(username, password, taskGroup);
    }
    public String getUsername() {
      return this.getArgument(0);
    }
    public String getPassword() {
      return this.getArgument(1);
    }
    public FullpageTaskGroup getTaskGroup() {
      return this.getArgument(2);
    }
  }

  public static class updateFullpageTaskResult extends IdlResult<ApiResult> {

  }

  public static class batchUpdateTaskStatusInvocation extends IdlInvocation<batchUpdateTaskStatusInvocation, batchUpdateTaskStatusResult> {

    public batchUpdateTaskStatusInvocation() {
    }
    public batchUpdateTaskStatusInvocation(String username, String password, TaskGroupType type, int status, List<String> taskGroupIds) {
      super.setArguments(username, password, type, status, taskGroupIds);
    }
    public String getUsername() {
      return this.getArgument(0);
    }
    public String getPassword() {
      return this.getArgument(1);
    }
    public TaskGroupType getType() {
      return this.getArgument(2);
    }
    public int getStatus() {
      return this.getArgument(3);
    }
    public List<String> getTaskGroupIds() {
      return this.getArgument(4);
    }
  }

  public static class batchUpdateTaskStatusResult extends IdlResult<ApiResult> {

  }

  private static class queryTask_args implements com.cnc.dna.platform.thrift.TBase<queryTask_args, queryTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("queryTask_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField USERNAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("username", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PASSWORD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("password", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
    private static final com.cnc.dna.platform.thrift.protocol.TField PARAM_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("param", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTask_argsTupleSchemeFactory());
    }

    private String username; // required
    private String password; // required
    private TaskQueryParam param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      PARAM((short)3, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("username", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.USERNAME);
      tmpMap.put(_Fields.PASSWORD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("password", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.PASSWORD);
      tmpMap.put(_Fields.PARAM, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("param", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, TaskQueryParam.class)));
      fieldList.add(_Fields.PARAM);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTask_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public queryTask_args() {
    }

    public queryTask_args(
      String username,
      String password,
      TaskQueryParam param)
    {
      this();
      this.username = username;
      this.password = password;
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTask_args(queryTask_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetParam()) {
        this.param = new TaskQueryParam(other.param);
      }
    }

    public queryTask_args deepCopy() {
      return new queryTask_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.param = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public TaskQueryParam getParam() {
      return this.param;
    }

    public void setParam(TaskQueryParam param) {
      this.param = param;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((TaskQueryParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTask_args)
        return this.equals((queryTask_args)that);
      return false;
    }

    public boolean equals(queryTask_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryTask_args typedOther = (queryTask_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParam()).compareTo(typedOther.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.param, typedOther.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTask_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTask_argsStandardSchemeFactory implements SchemeFactory {
      public queryTask_argsStandardScheme getScheme() {
        return new queryTask_argsStandardScheme();
      }
    }

    private static class queryTask_argsStandardScheme extends StandardScheme<queryTask_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, queryTask_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAM
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.param = new TaskQueryParam();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, queryTask_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTask_argsTupleSchemeFactory implements SchemeFactory {
      public queryTask_argsTupleScheme getScheme() {
        return new queryTask_argsTupleScheme();
      }
    }

    private static class queryTask_argsTupleScheme extends TupleScheme<queryTask_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, queryTask_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetParam()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, queryTask_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.param = new TaskQueryParam();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

  }

  private static class queryTask_result implements com.cnc.dna.platform.thrift.TBase<queryTask_result, queryTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("queryTask_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTask_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTask_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public queryTask_result() {
    }

    public queryTask_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTask_result(queryTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public queryTask_result deepCopy() {
      return new queryTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTask_result)
        return this.equals((queryTask_result)that);
      return false;
    }

    public boolean equals(queryTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(queryTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      queryTask_result typedOther = (queryTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTask_resultStandardSchemeFactory implements SchemeFactory {
      public queryTask_resultStandardScheme getScheme() {
        return new queryTask_resultStandardScheme();
      }
    }

    private static class queryTask_resultStandardScheme extends StandardScheme<queryTask_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, queryTask_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, queryTask_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTask_resultTupleSchemeFactory implements SchemeFactory {
      public queryTask_resultTupleScheme getScheme() {
        return new queryTask_resultTupleScheme();
      }
    }

    private static class queryTask_resultTupleScheme extends TupleScheme<queryTask_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, queryTask_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, queryTask_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  private static class updateHttpTask_args implements com.cnc.dna.platform.thrift.TBase<updateHttpTask_args, updateHttpTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateHttpTask_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField USERNAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("username", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PASSWORD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("password", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
    private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroup", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHttpTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHttpTask_argsTupleSchemeFactory());
    }

    private String username; // required
    private String password; // required
    private HttpTaskGroup taskGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      TASK_GROUP((short)3, "taskGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TASK_GROUP
            return TASK_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("username", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.USERNAME);
      tmpMap.put(_Fields.PASSWORD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("password", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.PASSWORD);
      tmpMap.put(_Fields.TASK_GROUP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroup", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, HttpTaskGroup.class)));
      fieldList.add(_Fields.TASK_GROUP);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHttpTask_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateHttpTask_args() {
    }

    public updateHttpTask_args(
      String username,
      String password,
      HttpTaskGroup taskGroup)
    {
      this();
      this.username = username;
      this.password = password;
      this.taskGroup = taskGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHttpTask_args(updateHttpTask_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTaskGroup()) {
        this.taskGroup = new HttpTaskGroup(other.taskGroup);
      }
    }

    public updateHttpTask_args deepCopy() {
      return new updateHttpTask_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.taskGroup = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public HttpTaskGroup getTaskGroup() {
      return this.taskGroup;
    }

    public void setTaskGroup(HttpTaskGroup taskGroup) {
      this.taskGroup = taskGroup;
    }

    public void unsetTaskGroup() {
      this.taskGroup = null;
    }

    /** Returns true if field taskGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskGroup() {
      return this.taskGroup != null;
    }

    public void setTaskGroupIsSet(boolean value) {
      if (!value) {
        this.taskGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TASK_GROUP:
        if (value == null) {
          unsetTaskGroup();
        } else {
          setTaskGroup((HttpTaskGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TASK_GROUP:
        return getTaskGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TASK_GROUP:
        return isSetTaskGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHttpTask_args)
        return this.equals((updateHttpTask_args)that);
      return false;
    }

    public boolean equals(updateHttpTask_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_taskGroup = true && this.isSetTaskGroup();
      boolean that_present_taskGroup = true && that.isSetTaskGroup();
      if (this_present_taskGroup || that_present_taskGroup) {
        if (!(this_present_taskGroup && that_present_taskGroup))
          return false;
        if (!this.taskGroup.equals(that.taskGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateHttpTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateHttpTask_args typedOther = (updateHttpTask_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskGroup()).compareTo(typedOther.isSetTaskGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskGroup()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroup, typedOther.taskGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHttpTask_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskGroup:");
      if (this.taskGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.taskGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (taskGroup != null) {
        taskGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHttpTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateHttpTask_argsStandardScheme getScheme() {
        return new updateHttpTask_argsStandardScheme();
      }
    }

    private static class updateHttpTask_argsStandardScheme extends StandardScheme<updateHttpTask_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateHttpTask_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_GROUP
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.taskGroup = new HttpTaskGroup();
                struct.taskGroup.read(iprot);
                struct.setTaskGroupIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateHttpTask_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.taskGroup != null) {
          oprot.writeFieldBegin(TASK_GROUP_FIELD_DESC);
          struct.taskGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHttpTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateHttpTask_argsTupleScheme getScheme() {
        return new updateHttpTask_argsTupleScheme();
      }
    }

    private static class updateHttpTask_argsTupleScheme extends TupleScheme<updateHttpTask_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateHttpTask_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetTaskGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTaskGroup()) {
          struct.taskGroup.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateHttpTask_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.taskGroup = new HttpTaskGroup();
          struct.taskGroup.read(iprot);
          struct.setTaskGroupIsSet(true);
        }
      }
    }

  }

  private static class updateHttpTask_result implements com.cnc.dna.platform.thrift.TBase<updateHttpTask_result, updateHttpTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateHttpTask_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateHttpTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateHttpTask_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateHttpTask_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateHttpTask_result() {
    }

    public updateHttpTask_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateHttpTask_result(updateHttpTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public updateHttpTask_result deepCopy() {
      return new updateHttpTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateHttpTask_result)
        return this.equals((updateHttpTask_result)that);
      return false;
    }

    public boolean equals(updateHttpTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateHttpTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateHttpTask_result typedOther = (updateHttpTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateHttpTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateHttpTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateHttpTask_resultStandardScheme getScheme() {
        return new updateHttpTask_resultStandardScheme();
      }
    }

    private static class updateHttpTask_resultStandardScheme extends StandardScheme<updateHttpTask_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateHttpTask_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateHttpTask_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateHttpTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateHttpTask_resultTupleScheme getScheme() {
        return new updateHttpTask_resultTupleScheme();
      }
    }

    private static class updateHttpTask_resultTupleScheme extends TupleScheme<updateHttpTask_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateHttpTask_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateHttpTask_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  private static class updateStreamTask_args implements com.cnc.dna.platform.thrift.TBase<updateStreamTask_args, updateStreamTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateStreamTask_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField USERNAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("username", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PASSWORD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("password", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
    private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroup", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStreamTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStreamTask_argsTupleSchemeFactory());
    }

    private String username; // required
    private String password; // required
    private StreamTaskGroup taskGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      TASK_GROUP((short)3, "taskGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TASK_GROUP
            return TASK_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("username", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.USERNAME);
      tmpMap.put(_Fields.PASSWORD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("password", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.PASSWORD);
      tmpMap.put(_Fields.TASK_GROUP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroup", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, StreamTaskGroup.class)));
      fieldList.add(_Fields.TASK_GROUP);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStreamTask_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateStreamTask_args() {
    }

    public updateStreamTask_args(
      String username,
      String password,
      StreamTaskGroup taskGroup)
    {
      this();
      this.username = username;
      this.password = password;
      this.taskGroup = taskGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStreamTask_args(updateStreamTask_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTaskGroup()) {
        this.taskGroup = new StreamTaskGroup(other.taskGroup);
      }
    }

    public updateStreamTask_args deepCopy() {
      return new updateStreamTask_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.taskGroup = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public StreamTaskGroup getTaskGroup() {
      return this.taskGroup;
    }

    public void setTaskGroup(StreamTaskGroup taskGroup) {
      this.taskGroup = taskGroup;
    }

    public void unsetTaskGroup() {
      this.taskGroup = null;
    }

    /** Returns true if field taskGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskGroup() {
      return this.taskGroup != null;
    }

    public void setTaskGroupIsSet(boolean value) {
      if (!value) {
        this.taskGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TASK_GROUP:
        if (value == null) {
          unsetTaskGroup();
        } else {
          setTaskGroup((StreamTaskGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TASK_GROUP:
        return getTaskGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TASK_GROUP:
        return isSetTaskGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStreamTask_args)
        return this.equals((updateStreamTask_args)that);
      return false;
    }

    public boolean equals(updateStreamTask_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_taskGroup = true && this.isSetTaskGroup();
      boolean that_present_taskGroup = true && that.isSetTaskGroup();
      if (this_present_taskGroup || that_present_taskGroup) {
        if (!(this_present_taskGroup && that_present_taskGroup))
          return false;
        if (!this.taskGroup.equals(that.taskGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStreamTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStreamTask_args typedOther = (updateStreamTask_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskGroup()).compareTo(typedOther.isSetTaskGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskGroup()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroup, typedOther.taskGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStreamTask_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskGroup:");
      if (this.taskGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.taskGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (taskGroup != null) {
        taskGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStreamTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateStreamTask_argsStandardScheme getScheme() {
        return new updateStreamTask_argsStandardScheme();
      }
    }

    private static class updateStreamTask_argsStandardScheme extends StandardScheme<updateStreamTask_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateStreamTask_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_GROUP
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.taskGroup = new StreamTaskGroup();
                struct.taskGroup.read(iprot);
                struct.setTaskGroupIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateStreamTask_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.taskGroup != null) {
          oprot.writeFieldBegin(TASK_GROUP_FIELD_DESC);
          struct.taskGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStreamTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateStreamTask_argsTupleScheme getScheme() {
        return new updateStreamTask_argsTupleScheme();
      }
    }

    private static class updateStreamTask_argsTupleScheme extends TupleScheme<updateStreamTask_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateStreamTask_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetTaskGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTaskGroup()) {
          struct.taskGroup.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateStreamTask_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.taskGroup = new StreamTaskGroup();
          struct.taskGroup.read(iprot);
          struct.setTaskGroupIsSet(true);
        }
      }
    }

  }

  private static class updateStreamTask_result implements com.cnc.dna.platform.thrift.TBase<updateStreamTask_result, updateStreamTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateStreamTask_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStreamTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStreamTask_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStreamTask_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateStreamTask_result() {
    }

    public updateStreamTask_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStreamTask_result(updateStreamTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public updateStreamTask_result deepCopy() {
      return new updateStreamTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStreamTask_result)
        return this.equals((updateStreamTask_result)that);
      return false;
    }

    public boolean equals(updateStreamTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStreamTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStreamTask_result typedOther = (updateStreamTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStreamTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStreamTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateStreamTask_resultStandardScheme getScheme() {
        return new updateStreamTask_resultStandardScheme();
      }
    }

    private static class updateStreamTask_resultStandardScheme extends StandardScheme<updateStreamTask_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateStreamTask_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateStreamTask_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStreamTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateStreamTask_resultTupleScheme getScheme() {
        return new updateStreamTask_resultTupleScheme();
      }
    }

    private static class updateStreamTask_resultTupleScheme extends TupleScheme<updateStreamTask_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateStreamTask_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateStreamTask_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  private static class updateMobileTask_args implements com.cnc.dna.platform.thrift.TBase<updateMobileTask_args, updateMobileTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateMobileTask_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField USERNAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("username", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PASSWORD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("password", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
    private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroup", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMobileTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMobileTask_argsTupleSchemeFactory());
    }

    private String username; // required
    private String password; // required
    private MobileTaskGroup taskGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      TASK_GROUP((short)3, "taskGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TASK_GROUP
            return TASK_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("username", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.USERNAME);
      tmpMap.put(_Fields.PASSWORD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("password", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.PASSWORD);
      tmpMap.put(_Fields.TASK_GROUP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroup", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, MobileTaskGroup.class)));
      fieldList.add(_Fields.TASK_GROUP);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMobileTask_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateMobileTask_args() {
    }

    public updateMobileTask_args(
      String username,
      String password,
      MobileTaskGroup taskGroup)
    {
      this();
      this.username = username;
      this.password = password;
      this.taskGroup = taskGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMobileTask_args(updateMobileTask_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTaskGroup()) {
        this.taskGroup = new MobileTaskGroup(other.taskGroup);
      }
    }

    public updateMobileTask_args deepCopy() {
      return new updateMobileTask_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.taskGroup = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public MobileTaskGroup getTaskGroup() {
      return this.taskGroup;
    }

    public void setTaskGroup(MobileTaskGroup taskGroup) {
      this.taskGroup = taskGroup;
    }

    public void unsetTaskGroup() {
      this.taskGroup = null;
    }

    /** Returns true if field taskGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskGroup() {
      return this.taskGroup != null;
    }

    public void setTaskGroupIsSet(boolean value) {
      if (!value) {
        this.taskGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TASK_GROUP:
        if (value == null) {
          unsetTaskGroup();
        } else {
          setTaskGroup((MobileTaskGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TASK_GROUP:
        return getTaskGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TASK_GROUP:
        return isSetTaskGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMobileTask_args)
        return this.equals((updateMobileTask_args)that);
      return false;
    }

    public boolean equals(updateMobileTask_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_taskGroup = true && this.isSetTaskGroup();
      boolean that_present_taskGroup = true && that.isSetTaskGroup();
      if (this_present_taskGroup || that_present_taskGroup) {
        if (!(this_present_taskGroup && that_present_taskGroup))
          return false;
        if (!this.taskGroup.equals(that.taskGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateMobileTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateMobileTask_args typedOther = (updateMobileTask_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskGroup()).compareTo(typedOther.isSetTaskGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskGroup()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroup, typedOther.taskGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMobileTask_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskGroup:");
      if (this.taskGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.taskGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (taskGroup != null) {
        taskGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMobileTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateMobileTask_argsStandardScheme getScheme() {
        return new updateMobileTask_argsStandardScheme();
      }
    }

    private static class updateMobileTask_argsStandardScheme extends StandardScheme<updateMobileTask_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateMobileTask_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_GROUP
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.taskGroup = new MobileTaskGroup();
                struct.taskGroup.read(iprot);
                struct.setTaskGroupIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateMobileTask_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.taskGroup != null) {
          oprot.writeFieldBegin(TASK_GROUP_FIELD_DESC);
          struct.taskGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMobileTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateMobileTask_argsTupleScheme getScheme() {
        return new updateMobileTask_argsTupleScheme();
      }
    }

    private static class updateMobileTask_argsTupleScheme extends TupleScheme<updateMobileTask_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateMobileTask_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetTaskGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTaskGroup()) {
          struct.taskGroup.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateMobileTask_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.taskGroup = new MobileTaskGroup();
          struct.taskGroup.read(iprot);
          struct.setTaskGroupIsSet(true);
        }
      }
    }

  }

  private static class updateMobileTask_result implements com.cnc.dna.platform.thrift.TBase<updateMobileTask_result, updateMobileTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateMobileTask_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMobileTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMobileTask_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMobileTask_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateMobileTask_result() {
    }

    public updateMobileTask_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMobileTask_result(updateMobileTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public updateMobileTask_result deepCopy() {
      return new updateMobileTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMobileTask_result)
        return this.equals((updateMobileTask_result)that);
      return false;
    }

    public boolean equals(updateMobileTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateMobileTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateMobileTask_result typedOther = (updateMobileTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMobileTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMobileTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateMobileTask_resultStandardScheme getScheme() {
        return new updateMobileTask_resultStandardScheme();
      }
    }

    private static class updateMobileTask_resultStandardScheme extends StandardScheme<updateMobileTask_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateMobileTask_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateMobileTask_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMobileTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateMobileTask_resultTupleScheme getScheme() {
        return new updateMobileTask_resultTupleScheme();
      }
    }

    private static class updateMobileTask_resultTupleScheme extends TupleScheme<updateMobileTask_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateMobileTask_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateMobileTask_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  private static class updateFullpageTask_args implements com.cnc.dna.platform.thrift.TBase<updateFullpageTask_args, updateFullpageTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateFullpageTask_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField USERNAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("username", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PASSWORD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("password", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
    private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroup", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFullpageTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFullpageTask_argsTupleSchemeFactory());
    }

    private String username; // required
    private String password; // required
    private FullpageTaskGroup taskGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      TASK_GROUP((short)3, "taskGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TASK_GROUP
            return TASK_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("username", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.USERNAME);
      tmpMap.put(_Fields.PASSWORD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("password", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.PASSWORD);
      tmpMap.put(_Fields.TASK_GROUP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroup", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, FullpageTaskGroup.class)));
      fieldList.add(_Fields.TASK_GROUP);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFullpageTask_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateFullpageTask_args() {
    }

    public updateFullpageTask_args(
      String username,
      String password,
      FullpageTaskGroup taskGroup)
    {
      this();
      this.username = username;
      this.password = password;
      this.taskGroup = taskGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFullpageTask_args(updateFullpageTask_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTaskGroup()) {
        this.taskGroup = new FullpageTaskGroup(other.taskGroup);
      }
    }

    public updateFullpageTask_args deepCopy() {
      return new updateFullpageTask_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.taskGroup = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public FullpageTaskGroup getTaskGroup() {
      return this.taskGroup;
    }

    public void setTaskGroup(FullpageTaskGroup taskGroup) {
      this.taskGroup = taskGroup;
    }

    public void unsetTaskGroup() {
      this.taskGroup = null;
    }

    /** Returns true if field taskGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskGroup() {
      return this.taskGroup != null;
    }

    public void setTaskGroupIsSet(boolean value) {
      if (!value) {
        this.taskGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TASK_GROUP:
        if (value == null) {
          unsetTaskGroup();
        } else {
          setTaskGroup((FullpageTaskGroup)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TASK_GROUP:
        return getTaskGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TASK_GROUP:
        return isSetTaskGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFullpageTask_args)
        return this.equals((updateFullpageTask_args)that);
      return false;
    }

    public boolean equals(updateFullpageTask_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_taskGroup = true && this.isSetTaskGroup();
      boolean that_present_taskGroup = true && that.isSetTaskGroup();
      if (this_present_taskGroup || that_present_taskGroup) {
        if (!(this_present_taskGroup && that_present_taskGroup))
          return false;
        if (!this.taskGroup.equals(that.taskGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFullpageTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFullpageTask_args typedOther = (updateFullpageTask_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskGroup()).compareTo(typedOther.isSetTaskGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskGroup()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroup, typedOther.taskGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFullpageTask_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskGroup:");
      if (this.taskGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.taskGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (taskGroup != null) {
        taskGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFullpageTask_argsStandardSchemeFactory implements SchemeFactory {
      public updateFullpageTask_argsStandardScheme getScheme() {
        return new updateFullpageTask_argsStandardScheme();
      }
    }

    private static class updateFullpageTask_argsStandardScheme extends StandardScheme<updateFullpageTask_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateFullpageTask_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_GROUP
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.taskGroup = new FullpageTaskGroup();
                struct.taskGroup.read(iprot);
                struct.setTaskGroupIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateFullpageTask_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.taskGroup != null) {
          oprot.writeFieldBegin(TASK_GROUP_FIELD_DESC);
          struct.taskGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFullpageTask_argsTupleSchemeFactory implements SchemeFactory {
      public updateFullpageTask_argsTupleScheme getScheme() {
        return new updateFullpageTask_argsTupleScheme();
      }
    }

    private static class updateFullpageTask_argsTupleScheme extends TupleScheme<updateFullpageTask_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateFullpageTask_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetTaskGroup()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTaskGroup()) {
          struct.taskGroup.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateFullpageTask_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.taskGroup = new FullpageTaskGroup();
          struct.taskGroup.read(iprot);
          struct.setTaskGroupIsSet(true);
        }
      }
    }

  }

  private static class updateFullpageTask_result implements com.cnc.dna.platform.thrift.TBase<updateFullpageTask_result, updateFullpageTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("updateFullpageTask_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFullpageTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFullpageTask_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFullpageTask_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public updateFullpageTask_result() {
    }

    public updateFullpageTask_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFullpageTask_result(updateFullpageTask_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public updateFullpageTask_result deepCopy() {
      return new updateFullpageTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFullpageTask_result)
        return this.equals((updateFullpageTask_result)that);
      return false;
    }

    public boolean equals(updateFullpageTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateFullpageTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateFullpageTask_result typedOther = (updateFullpageTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFullpageTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFullpageTask_resultStandardSchemeFactory implements SchemeFactory {
      public updateFullpageTask_resultStandardScheme getScheme() {
        return new updateFullpageTask_resultStandardScheme();
      }
    }

    private static class updateFullpageTask_resultStandardScheme extends StandardScheme<updateFullpageTask_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, updateFullpageTask_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, updateFullpageTask_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFullpageTask_resultTupleSchemeFactory implements SchemeFactory {
      public updateFullpageTask_resultTupleScheme getScheme() {
        return new updateFullpageTask_resultTupleScheme();
      }
    }

    private static class updateFullpageTask_resultTupleScheme extends TupleScheme<updateFullpageTask_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateFullpageTask_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, updateFullpageTask_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  private static class batchUpdateTaskStatus_args implements com.cnc.dna.platform.thrift.TBase<batchUpdateTaskStatus_args, batchUpdateTaskStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("batchUpdateTaskStatus_args");

    private static final com.cnc.dna.platform.thrift.protocol.TField USERNAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("username", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
    private static final com.cnc.dna.platform.thrift.protocol.TField PASSWORD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("password", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
    private static final com.cnc.dna.platform.thrift.protocol.TField TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("type", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)3);
    private static final com.cnc.dna.platform.thrift.protocol.TField STATUS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("status", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)4);
    private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_IDS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupIds", com.cnc.dna.platform.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchUpdateTaskStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchUpdateTaskStatus_argsTupleSchemeFactory());
    }

    private String username; // required
    private String password; // required
    private TaskGroupType type; // required
    private int status; // required
    private List<String> taskGroupIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password"),
      /**
       * 
       * @see TaskGroupType
       */
      TYPE((short)3, "type"),
      STATUS((short)4, "status"),
      TASK_GROUP_IDS((short)5, "taskGroupIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TYPE
            return TYPE;
          case 4: // STATUS
            return STATUS;
          case 5: // TASK_GROUP_IDS
            return TASK_GROUP_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATUS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("username", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.USERNAME);
      tmpMap.put(_Fields.PASSWORD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("password", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
      fieldList.add(_Fields.PASSWORD);
      tmpMap.put(_Fields.TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("type", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.EnumMetaData(com.cnc.dna.platform.thrift.protocol.TType.ENUM, TaskGroupType.class)));
      fieldList.add(_Fields.TYPE);
      tmpMap.put(_Fields.STATUS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("status", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
      fieldList.add(_Fields.STATUS);
      tmpMap.put(_Fields.TASK_GROUP_IDS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupIds", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.ListMetaData(com.cnc.dna.platform.thrift.protocol.TType.LIST, 
              new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING))));
      fieldList.add(_Fields.TASK_GROUP_IDS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchUpdateTaskStatus_args.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public batchUpdateTaskStatus_args() {
    }

    public batchUpdateTaskStatus_args(
      String username,
      String password,
      TaskGroupType type,
      int status,
      List<String> taskGroupIds)
    {
      this();
      this.username = username;
      this.password = password;
      this.type = type;
      this.status = status;
      setStatusIsSet(true);
      this.taskGroupIds = taskGroupIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchUpdateTaskStatus_args(batchUpdateTaskStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      this.status = other.status;
      if (other.isSetTaskGroupIds()) {
        List<String> __this__taskGroupIds = new ArrayList<String>();
        for (String other_element : other.taskGroupIds) {
          __this__taskGroupIds.add(other_element);
        }
        this.taskGroupIds = __this__taskGroupIds;
      }
    }

    public batchUpdateTaskStatus_args deepCopy() {
      return new batchUpdateTaskStatus_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
      this.type = null;
      setStatusIsSet(false);
      this.status = 0;
      this.taskGroupIds = null;
    }

    public String getUsername() {
      return this.username;
    }

    public void setUsername(String username) {
      this.username = username;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    /**
     * 
     * @see TaskGroupType
     */
    public TaskGroupType getType() {
      return this.type;
    }

    /**
     * 
     * @see TaskGroupType
     */
    public void setType(TaskGroupType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getStatus() {
      return this.status;
    }

    public void setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
    }

    public void unsetStatus() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
    }

    public void setStatusIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
    }

    public int getTaskGroupIdsSize() {
      return (this.taskGroupIds == null) ? 0 : this.taskGroupIds.size();
    }

    public java.util.Iterator<String> getTaskGroupIdsIterator() {
      return (this.taskGroupIds == null) ? null : this.taskGroupIds.iterator();
    }

    public void addToTaskGroupIds(String elem) {
      if (this.taskGroupIds == null) {
        this.taskGroupIds = new ArrayList<String>();
      }
      this.taskGroupIds.add(elem);
    }

    public List<String> getTaskGroupIds() {
      return this.taskGroupIds;
    }

    public void setTaskGroupIds(List<String> taskGroupIds) {
      this.taskGroupIds = taskGroupIds;
    }

    public void unsetTaskGroupIds() {
      this.taskGroupIds = null;
    }

    /** Returns true if field taskGroupIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskGroupIds() {
      return this.taskGroupIds != null;
    }

    public void setTaskGroupIdsIsSet(boolean value) {
      if (!value) {
        this.taskGroupIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((TaskGroupType)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((Integer)value);
        }
        break;

      case TASK_GROUP_IDS:
        if (value == null) {
          unsetTaskGroupIds();
        } else {
          setTaskGroupIds((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TYPE:
        return getType();

      case STATUS:
        return Integer.valueOf(getStatus());

      case TASK_GROUP_IDS:
        return getTaskGroupIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TYPE:
        return isSetType();
      case STATUS:
        return isSetStatus();
      case TASK_GROUP_IDS:
        return isSetTaskGroupIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchUpdateTaskStatus_args)
        return this.equals((batchUpdateTaskStatus_args)that);
      return false;
    }

    public boolean equals(batchUpdateTaskStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      boolean this_present_taskGroupIds = true && this.isSetTaskGroupIds();
      boolean that_present_taskGroupIds = true && that.isSetTaskGroupIds();
      if (this_present_taskGroupIds || that_present_taskGroupIds) {
        if (!(this_present_taskGroupIds && that_present_taskGroupIds))
          return false;
        if (!this.taskGroupIds.equals(that.taskGroupIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batchUpdateTaskStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batchUpdateTaskStatus_args typedOther = (batchUpdateTaskStatus_args)other;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskGroupIds()).compareTo(typedOther.isSetTaskGroupIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskGroupIds()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupIds, typedOther.taskGroupIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchUpdateTaskStatus_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskGroupIds:");
      if (this.taskGroupIds == null) {
        sb.append("null");
      } else {
        sb.append(this.taskGroupIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchUpdateTaskStatus_argsStandardSchemeFactory implements SchemeFactory {
      public batchUpdateTaskStatus_argsStandardScheme getScheme() {
        return new batchUpdateTaskStatus_argsStandardScheme();
      }
    }

    private static class batchUpdateTaskStatus_argsStandardScheme extends StandardScheme<batchUpdateTaskStatus_args> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, batchUpdateTaskStatus_args struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
                struct.type = TaskGroupType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STATUS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
                struct.status = iprot.readI32();
                struct.setStatusIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TASK_GROUP_IDS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.LIST) {
                {
                  com.cnc.dna.platform.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.taskGroupIds = new ArrayList<String>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    String _elem58; // required
                    _elem58 = iprot.readString();
                    struct.taskGroupIds.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskGroupIdsIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, batchUpdateTaskStatus_args struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
        if (struct.taskGroupIds != null) {
          oprot.writeFieldBegin(TASK_GROUP_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRING, struct.taskGroupIds.size()));
            for (String _iter59 : struct.taskGroupIds)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchUpdateTaskStatus_argsTupleSchemeFactory implements SchemeFactory {
      public batchUpdateTaskStatus_argsTupleScheme getScheme() {
        return new batchUpdateTaskStatus_argsTupleScheme();
      }
    }

    private static class batchUpdateTaskStatus_argsTupleScheme extends TupleScheme<batchUpdateTaskStatus_args> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, batchUpdateTaskStatus_args struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUsername()) {
          optionals.set(0);
        }
        if (struct.isSetPassword()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetStatus()) {
          optionals.set(3);
        }
        if (struct.isSetTaskGroupIds()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status);
        }
        if (struct.isSetTaskGroupIds()) {
          {
            oprot.writeI32(struct.taskGroupIds.size());
            for (String _iter60 : struct.taskGroupIds)
            {
              oprot.writeString(_iter60);
            }
          }
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, batchUpdateTaskStatus_args struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = TaskGroupType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.status = iprot.readI32();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(4)) {
          {
            com.cnc.dna.platform.thrift.protocol.TList _list61 = new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRING, iprot.readI32());
            struct.taskGroupIds = new ArrayList<String>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              String _elem63; // required
              _elem63 = iprot.readString();
              struct.taskGroupIds.add(_elem63);
            }
          }
          struct.setTaskGroupIdsIsSet(true);
        }
      }
    }

  }

  private static class batchUpdateTaskStatus_result implements com.cnc.dna.platform.thrift.TBase<batchUpdateTaskStatus_result, batchUpdateTaskStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("batchUpdateTaskStatus_result");

    private static final com.cnc.dna.platform.thrift.protocol.TField SUCCESS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("success", com.cnc.dna.platform.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchUpdateTaskStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchUpdateTaskStatus_resultTupleSchemeFactory());
    }

    private ApiResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
    public static final List<_Fields> fieldList = new ArrayList();
    static {
      Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("success", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
          new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, ApiResult.class)));
      fieldList.add(_Fields.SUCCESS);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchUpdateTaskStatus_result.class, metaDataMap);
    }

    public _Fields getFieldByIndex(int index) {
    	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
    public batchUpdateTaskStatus_result() {
    }

    public batchUpdateTaskStatus_result(
      ApiResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchUpdateTaskStatus_result(batchUpdateTaskStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApiResult(other.success);
      }
    }

    public batchUpdateTaskStatus_result deepCopy() {
      return new batchUpdateTaskStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ApiResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ApiResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ApiResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchUpdateTaskStatus_result)
        return this.equals((batchUpdateTaskStatus_result)that);
      return false;
    }

    public boolean equals(batchUpdateTaskStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batchUpdateTaskStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batchUpdateTaskStatus_result typedOther = (batchUpdateTaskStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchUpdateTaskStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate()  {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
      } catch (com.cnc.dna.platform.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchUpdateTaskStatus_resultStandardSchemeFactory implements SchemeFactory {
      public batchUpdateTaskStatus_resultStandardScheme getScheme() {
        return new batchUpdateTaskStatus_resultStandardScheme();
      }
    }

    private static class batchUpdateTaskStatus_resultStandardScheme extends StandardScheme<batchUpdateTaskStatus_result> {

      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, batchUpdateTaskStatus_result struct)  {
        com.cnc.dna.platform.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRUCT) {
                struct.success = new ApiResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, batchUpdateTaskStatus_result struct)  {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchUpdateTaskStatus_resultTupleSchemeFactory implements SchemeFactory {
      public batchUpdateTaskStatus_resultTupleScheme getScheme() {
        return new batchUpdateTaskStatus_resultTupleScheme();
      }
    }

    private static class batchUpdateTaskStatus_resultTupleScheme extends TupleScheme<batchUpdateTaskStatus_result> {

      @Override
      public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, batchUpdateTaskStatus_result struct)  {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, batchUpdateTaskStatus_result struct)  {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ApiResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
