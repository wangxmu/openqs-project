/**
 * Autogenerated by Thrift Compiler (DNA Version, Base 0.90.0)
 *
 *  @CDN Department. ChinaNetCenter 2014
 */
package com.cnc.dna.api.openQS.TaskManage.v1;

import com.cnc.dna.platform.thrift.scheme.IScheme;
import com.cnc.dna.platform.thrift.scheme.SchemeFactory;
import com.cnc.dna.platform.thrift.scheme.StandardScheme;

import com.cnc.dna.platform.thrift.scheme.TupleScheme;
import com.cnc.dna.platform.thrift.protocol.TTupleProtocol;
import com.cnc.dna.platform.thrift.protocol.TProtocolException;
import com.cnc.dna.platform.thrift.EncodingUtils;
import com.cnc.dna.platform.thrift.TException;
import com.cnc.dna.platform.rpc.spi.context.IdlInvocation;
import com.cnc.dna.platform.rpc.spi.context.IdlResult;
import com.cnc.dna.platform.rpc.Handler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FullpageTaskGroup implements com.cnc.dna.platform.thrift.TBase<FullpageTaskGroup, FullpageTaskGroup._Fields>, java.io.Serializable, Cloneable {
  private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("FullpageTaskGroup");

  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_ID_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupId", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupType", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)2);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_NAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupName", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)3);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_LIST_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskList", com.cnc.dna.platform.thrift.protocol.TType.LIST, (short)4);
  private static final com.cnc.dna.platform.thrift.protocol.TField BEGIN_DATE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("beginDate", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)5);
  private static final com.cnc.dna.platform.thrift.protocol.TField END_DATE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("endDate", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)6);
  private static final com.cnc.dna.platform.thrift.protocol.TField INTERVAL_TIME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("intervalTime", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)7);
  private static final com.cnc.dna.platform.thrift.protocol.TField STATUS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("status", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)8);
  private static final com.cnc.dna.platform.thrift.protocol.TField REMARK_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("remark", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)9);
  private static final com.cnc.dna.platform.thrift.protocol.TField TIME_OUT_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("timeOut", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)10);
  private static final com.cnc.dna.platform.thrift.protocol.TField WORKORDER_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("workorder", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)11);
  private static final com.cnc.dna.platform.thrift.protocol.TField WORKORDER_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("workorderType", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)12);
  private static final com.cnc.dna.platform.thrift.protocol.TField BROWSER_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("browser", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)13);
  private static final com.cnc.dna.platform.thrift.protocol.TField BANDWIDTH_UP_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("bandwidthUp", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)14);
  private static final com.cnc.dna.platform.thrift.protocol.TField BANDWIDTH_DOWN_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("bandwidthDown", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)15);
  private static final com.cnc.dna.platform.thrift.protocol.TField NOSCRIPT_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("noscript", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)16);
  private static final com.cnc.dna.platform.thrift.protocol.TField CONNECTION_TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("connectionType", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)17);
  private static final com.cnc.dna.platform.thrift.protocol.TField URL_HOSTS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("urlHosts", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)18);
  private static final com.cnc.dna.platform.thrift.protocol.TField HTTP_HEAD_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("httpHead", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)19);
  private static final com.cnc.dna.platform.thrift.protocol.TField MONITOR_EXCLUDE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("monitorExclude", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)20);
  private static final com.cnc.dna.platform.thrift.protocol.TField TIME_LIST_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("timeList", com.cnc.dna.platform.thrift.protocol.TType.LIST, (short)21);
  private static final com.cnc.dna.platform.thrift.protocol.TField NODE_GROUP_NAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("nodeGroupName", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)22);
  private static final com.cnc.dna.platform.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("timeZone", com.cnc.dna.platform.thrift.protocol.TType.I32, (short)23);
  private static final com.cnc.dna.platform.thrift.protocol.TField BLOCK_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("block", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FullpageTaskGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FullpageTaskGroupTupleSchemeFactory());
  }

  private String taskGroupId; // required
  private int taskGroupType; // required
  private String taskGroupName; // required
  private List<Task> taskList; // required
  private String beginDate; // required
  private String endDate; // required
  private int intervalTime; // required
  private int status; // required
  private String remark; // required
  private int timeOut; // required
  private int workorder; // required
  private int workorderType; // required
  private String browser; // required
  private int bandwidthUp; // required
  private int bandwidthDown; // required
  private int noscript; // required
  private int connectionType; // required
  private String urlHosts; // required
  private String httpHead; // required
  private String monitorExclude; // required
  private List<TimeList> timeList; // required
  private String nodeGroupName; // required
  private int timeZone; // required
  private String block; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
    TASK_GROUP_ID((short)1, "taskGroupId"),
    TASK_GROUP_TYPE((short)2, "taskGroupType"),
    TASK_GROUP_NAME((short)3, "taskGroupName"),
    TASK_LIST((short)4, "taskList"),
    BEGIN_DATE((short)5, "beginDate"),
    END_DATE((short)6, "endDate"),
    INTERVAL_TIME((short)7, "intervalTime"),
    STATUS((short)8, "status"),
    REMARK((short)9, "remark"),
    TIME_OUT((short)10, "timeOut"),
    WORKORDER((short)11, "workorder"),
    WORKORDER_TYPE((short)12, "workorderType"),
    BROWSER((short)13, "browser"),
    BANDWIDTH_UP((short)14, "bandwidthUp"),
    BANDWIDTH_DOWN((short)15, "bandwidthDown"),
    NOSCRIPT((short)16, "noscript"),
    CONNECTION_TYPE((short)17, "connectionType"),
    URL_HOSTS((short)18, "urlHosts"),
    HTTP_HEAD((short)19, "httpHead"),
    MONITOR_EXCLUDE((short)20, "monitorExclude"),
    TIME_LIST((short)21, "timeList"),
    NODE_GROUP_NAME((short)22, "nodeGroupName"),
    TIME_ZONE((short)23, "timeZone"),
    BLOCK((short)24, "block");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_GROUP_ID
          return TASK_GROUP_ID;
        case 2: // TASK_GROUP_TYPE
          return TASK_GROUP_TYPE;
        case 3: // TASK_GROUP_NAME
          return TASK_GROUP_NAME;
        case 4: // TASK_LIST
          return TASK_LIST;
        case 5: // BEGIN_DATE
          return BEGIN_DATE;
        case 6: // END_DATE
          return END_DATE;
        case 7: // INTERVAL_TIME
          return INTERVAL_TIME;
        case 8: // STATUS
          return STATUS;
        case 9: // REMARK
          return REMARK;
        case 10: // TIME_OUT
          return TIME_OUT;
        case 11: // WORKORDER
          return WORKORDER;
        case 12: // WORKORDER_TYPE
          return WORKORDER_TYPE;
        case 13: // BROWSER
          return BROWSER;
        case 14: // BANDWIDTH_UP
          return BANDWIDTH_UP;
        case 15: // BANDWIDTH_DOWN
          return BANDWIDTH_DOWN;
        case 16: // NOSCRIPT
          return NOSCRIPT;
        case 17: // CONNECTION_TYPE
          return CONNECTION_TYPE;
        case 18: // URL_HOSTS
          return URL_HOSTS;
        case 19: // HTTP_HEAD
          return HTTP_HEAD;
        case 20: // MONITOR_EXCLUDE
          return MONITOR_EXCLUDE;
        case 21: // TIME_LIST
          return TIME_LIST;
        case 22: // NODE_GROUP_NAME
          return NODE_GROUP_NAME;
        case 23: // TIME_ZONE
          return TIME_ZONE;
        case 24: // BLOCK
          return BLOCK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKGROUPTYPE_ISSET_ID = 0;
  private static final int __INTERVALTIME_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __TIMEOUT_ISSET_ID = 3;
  private static final int __WORKORDER_ISSET_ID = 4;
  private static final int __WORKORDERTYPE_ISSET_ID = 5;
  private static final int __BANDWIDTHUP_ISSET_ID = 6;
  private static final int __BANDWIDTHDOWN_ISSET_ID = 7;
  private static final int __NOSCRIPT_ISSET_ID = 8;
  private static final int __CONNECTIONTYPE_ISSET_ID = 9;
  private static final int __TIMEZONE_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
  public static final List<_Fields> fieldList = new ArrayList();
  static {
    Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_GROUP_ID, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupId", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_GROUP_ID);
    tmpMap.put(_Fields.TASK_GROUP_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TASK_GROUP_TYPE);
    tmpMap.put(_Fields.TASK_GROUP_NAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupName", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_GROUP_NAME);
    tmpMap.put(_Fields.TASK_LIST, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskList", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.ListMetaData(com.cnc.dna.platform.thrift.protocol.TType.LIST, 
            new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, Task.class))));
    fieldList.add(_Fields.TASK_LIST);
    tmpMap.put(_Fields.BEGIN_DATE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("beginDate", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.BEGIN_DATE);
    tmpMap.put(_Fields.END_DATE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("endDate", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.END_DATE);
    tmpMap.put(_Fields.INTERVAL_TIME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("intervalTime", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.INTERVAL_TIME);
    tmpMap.put(_Fields.STATUS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("status", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.STATUS);
    tmpMap.put(_Fields.REMARK, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("remark", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.REMARK);
    tmpMap.put(_Fields.TIME_OUT, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("timeOut", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TIME_OUT);
    tmpMap.put(_Fields.WORKORDER, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("workorder", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.WORKORDER);
    tmpMap.put(_Fields.WORKORDER_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("workorderType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.WORKORDER_TYPE);
    tmpMap.put(_Fields.BROWSER, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("browser", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.BROWSER);
    tmpMap.put(_Fields.BANDWIDTH_UP, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("bandwidthUp", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.BANDWIDTH_UP);
    tmpMap.put(_Fields.BANDWIDTH_DOWN, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("bandwidthDown", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.BANDWIDTH_DOWN);
    tmpMap.put(_Fields.NOSCRIPT, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("noscript", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.NOSCRIPT);
    tmpMap.put(_Fields.CONNECTION_TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("connectionType", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.CONNECTION_TYPE);
    tmpMap.put(_Fields.URL_HOSTS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("urlHosts", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.URL_HOSTS);
    tmpMap.put(_Fields.HTTP_HEAD, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("httpHead", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.HTTP_HEAD);
    tmpMap.put(_Fields.MONITOR_EXCLUDE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("monitorExclude", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.MONITOR_EXCLUDE);
    tmpMap.put(_Fields.TIME_LIST, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("timeList", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.ListMetaData(com.cnc.dna.platform.thrift.protocol.TType.LIST, 
            new com.cnc.dna.platform.thrift.meta_data.StructMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, TimeList.class))));
    fieldList.add(_Fields.TIME_LIST);
    tmpMap.put(_Fields.NODE_GROUP_NAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("nodeGroupName", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.NODE_GROUP_NAME);
    tmpMap.put(_Fields.TIME_ZONE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("timeZone", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.I32)));
    fieldList.add(_Fields.TIME_ZONE);
    tmpMap.put(_Fields.BLOCK, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("block", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.BLOCK);
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FullpageTaskGroup.class, metaDataMap);
  }

  public _Fields getFieldByIndex(int index) {
  	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
  public FullpageTaskGroup() {
    this.intervalTime = 5;

    this.status = 0;

    this.timeOut = 120;

    this.workorder = 0;

    this.workorderType = 0;

    this.bandwidthUp = 4096;

    this.bandwidthDown = 4096;

    this.noscript = 0;

    this.connectionType = 4;

    this.timeZone = 8;

  }

  public FullpageTaskGroup(
    String taskGroupId,
    int taskGroupType,
    String taskGroupName,
    List<Task> taskList,
    String beginDate,
    String endDate,
    int intervalTime,
    int status,
    String remark,
    int timeOut,
    int workorder,
    int workorderType,
    String browser,
    int bandwidthUp,
    int bandwidthDown,
    int noscript,
    int connectionType,
    String urlHosts,
    String httpHead,
    String monitorExclude,
    List<TimeList> timeList,
    String nodeGroupName,
    int timeZone,
    String block)
  {
    this();
    this.taskGroupId = taskGroupId;
    this.taskGroupType = taskGroupType;
    setTaskGroupTypeIsSet(true);
    this.taskGroupName = taskGroupName;
    this.taskList = taskList;
    this.beginDate = beginDate;
    this.endDate = endDate;
    this.intervalTime = intervalTime;
    setIntervalTimeIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.remark = remark;
    this.timeOut = timeOut;
    setTimeOutIsSet(true);
    this.workorder = workorder;
    setWorkorderIsSet(true);
    this.workorderType = workorderType;
    setWorkorderTypeIsSet(true);
    this.browser = browser;
    this.bandwidthUp = bandwidthUp;
    setBandwidthUpIsSet(true);
    this.bandwidthDown = bandwidthDown;
    setBandwidthDownIsSet(true);
    this.noscript = noscript;
    setNoscriptIsSet(true);
    this.connectionType = connectionType;
    setConnectionTypeIsSet(true);
    this.urlHosts = urlHosts;
    this.httpHead = httpHead;
    this.monitorExclude = monitorExclude;
    this.timeList = timeList;
    this.nodeGroupName = nodeGroupName;
    this.timeZone = timeZone;
    setTimeZoneIsSet(true);
    this.block = block;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FullpageTaskGroup(FullpageTaskGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskGroupId()) {
      this.taskGroupId = other.taskGroupId;
    }
    this.taskGroupType = other.taskGroupType;
    if (other.isSetTaskGroupName()) {
      this.taskGroupName = other.taskGroupName;
    }
    if (other.isSetTaskList()) {
      List<Task> __this__taskList = new ArrayList<Task>();
      for (Task other_element : other.taskList) {
        __this__taskList.add(new Task(other_element));
      }
      this.taskList = __this__taskList;
    }
    if (other.isSetBeginDate()) {
      this.beginDate = other.beginDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.intervalTime = other.intervalTime;
    this.status = other.status;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.timeOut = other.timeOut;
    this.workorder = other.workorder;
    this.workorderType = other.workorderType;
    if (other.isSetBrowser()) {
      this.browser = other.browser;
    }
    this.bandwidthUp = other.bandwidthUp;
    this.bandwidthDown = other.bandwidthDown;
    this.noscript = other.noscript;
    this.connectionType = other.connectionType;
    if (other.isSetUrlHosts()) {
      this.urlHosts = other.urlHosts;
    }
    if (other.isSetHttpHead()) {
      this.httpHead = other.httpHead;
    }
    if (other.isSetMonitorExclude()) {
      this.monitorExclude = other.monitorExclude;
    }
    if (other.isSetTimeList()) {
      List<TimeList> __this__timeList = new ArrayList<TimeList>();
      for (TimeList other_element : other.timeList) {
        __this__timeList.add(new TimeList(other_element));
      }
      this.timeList = __this__timeList;
    }
    if (other.isSetNodeGroupName()) {
      this.nodeGroupName = other.nodeGroupName;
    }
    this.timeZone = other.timeZone;
    if (other.isSetBlock()) {
      this.block = other.block;
    }
  }

  public FullpageTaskGroup deepCopy() {
    return new FullpageTaskGroup(this);
  }

  @Override
  public void clear() {
    this.taskGroupId = null;
    setTaskGroupTypeIsSet(false);
    this.taskGroupType = 0;
    this.taskGroupName = null;
    this.taskList = null;
    this.beginDate = null;
    this.endDate = null;
    this.intervalTime = 5;

    this.status = 0;

    this.remark = null;
    this.timeOut = 120;

    this.workorder = 0;

    this.workorderType = 0;

    this.browser = null;
    this.bandwidthUp = 4096;

    this.bandwidthDown = 4096;

    this.noscript = 0;

    this.connectionType = 4;

    this.urlHosts = null;
    this.httpHead = null;
    this.monitorExclude = null;
    this.timeList = null;
    this.nodeGroupName = null;
    this.timeZone = 8;

    this.block = null;
  }

  public String getTaskGroupId() {
    return this.taskGroupId;
  }

  public void setTaskGroupId(String taskGroupId) {
    this.taskGroupId = taskGroupId;
  }

  public void unsetTaskGroupId() {
    this.taskGroupId = null;
  }

  /** Returns true if field taskGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupId() {
    return this.taskGroupId != null;
  }

  public void setTaskGroupIdIsSet(boolean value) {
    if (!value) {
      this.taskGroupId = null;
    }
  }

  public int getTaskGroupType() {
    return this.taskGroupType;
  }

  public void setTaskGroupType(int taskGroupType) {
    this.taskGroupType = taskGroupType;
    setTaskGroupTypeIsSet(true);
  }

  public void unsetTaskGroupType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKGROUPTYPE_ISSET_ID);
  }

  /** Returns true if field taskGroupType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupType() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKGROUPTYPE_ISSET_ID);
  }

  public void setTaskGroupTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKGROUPTYPE_ISSET_ID, value);
  }

  public String getTaskGroupName() {
    return this.taskGroupName;
  }

  public void setTaskGroupName(String taskGroupName) {
    this.taskGroupName = taskGroupName;
  }

  public void unsetTaskGroupName() {
    this.taskGroupName = null;
  }

  /** Returns true if field taskGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupName() {
    return this.taskGroupName != null;
  }

  public void setTaskGroupNameIsSet(boolean value) {
    if (!value) {
      this.taskGroupName = null;
    }
  }

  public int getTaskListSize() {
    return (this.taskList == null) ? 0 : this.taskList.size();
  }

  public java.util.Iterator<Task> getTaskListIterator() {
    return (this.taskList == null) ? null : this.taskList.iterator();
  }

  public void addToTaskList(Task elem) {
    if (this.taskList == null) {
      this.taskList = new ArrayList<Task>();
    }
    this.taskList.add(elem);
  }

  public List<Task> getTaskList() {
    return this.taskList;
  }

  public void setTaskList(List<Task> taskList) {
    this.taskList = taskList;
  }

  public void unsetTaskList() {
    this.taskList = null;
  }

  /** Returns true if field taskList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskList() {
    return this.taskList != null;
  }

  public void setTaskListIsSet(boolean value) {
    if (!value) {
      this.taskList = null;
    }
  }

  public String getBeginDate() {
    return this.beginDate;
  }

  public void setBeginDate(String beginDate) {
    this.beginDate = beginDate;
  }

  public void unsetBeginDate() {
    this.beginDate = null;
  }

  /** Returns true if field beginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginDate() {
    return this.beginDate != null;
  }

  public void setBeginDateIsSet(boolean value) {
    if (!value) {
      this.beginDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getIntervalTime() {
    return this.intervalTime;
  }

  public void setIntervalTime(int intervalTime) {
    this.intervalTime = intervalTime;
    setIntervalTimeIsSet(true);
  }

  public void unsetIntervalTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVALTIME_ISSET_ID);
  }

  /** Returns true if field intervalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIntervalTime() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVALTIME_ISSET_ID);
  }

  public void setIntervalTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVALTIME_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public void setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public void setRemark(String remark) {
    this.remark = remark;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getTimeOut() {
    return this.timeOut;
  }

  public void setTimeOut(int timeOut) {
    this.timeOut = timeOut;
    setTimeOutIsSet(true);
  }

  public void unsetTimeOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeOut is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeOut() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public int getWorkorder() {
    return this.workorder;
  }

  public void setWorkorder(int workorder) {
    this.workorder = workorder;
    setWorkorderIsSet(true);
  }

  public void unsetWorkorder() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKORDER_ISSET_ID);
  }

  /** Returns true if field workorder is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkorder() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKORDER_ISSET_ID);
  }

  public void setWorkorderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKORDER_ISSET_ID, value);
  }

  public int getWorkorderType() {
    return this.workorderType;
  }

  public void setWorkorderType(int workorderType) {
    this.workorderType = workorderType;
    setWorkorderTypeIsSet(true);
  }

  public void unsetWorkorderType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WORKORDERTYPE_ISSET_ID);
  }

  /** Returns true if field workorderType is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkorderType() {
    return EncodingUtils.testBit(__isset_bitfield, __WORKORDERTYPE_ISSET_ID);
  }

  public void setWorkorderTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WORKORDERTYPE_ISSET_ID, value);
  }

  public String getBrowser() {
    return this.browser;
  }

  public void setBrowser(String browser) {
    this.browser = browser;
  }

  public void unsetBrowser() {
    this.browser = null;
  }

  /** Returns true if field browser is set (has been assigned a value) and false otherwise */
  public boolean isSetBrowser() {
    return this.browser != null;
  }

  public void setBrowserIsSet(boolean value) {
    if (!value) {
      this.browser = null;
    }
  }

  public int getBandwidthUp() {
    return this.bandwidthUp;
  }

  public void setBandwidthUp(int bandwidthUp) {
    this.bandwidthUp = bandwidthUp;
    setBandwidthUpIsSet(true);
  }

  public void unsetBandwidthUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANDWIDTHUP_ISSET_ID);
  }

  /** Returns true if field bandwidthUp is set (has been assigned a value) and false otherwise */
  public boolean isSetBandwidthUp() {
    return EncodingUtils.testBit(__isset_bitfield, __BANDWIDTHUP_ISSET_ID);
  }

  public void setBandwidthUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANDWIDTHUP_ISSET_ID, value);
  }

  public int getBandwidthDown() {
    return this.bandwidthDown;
  }

  public void setBandwidthDown(int bandwidthDown) {
    this.bandwidthDown = bandwidthDown;
    setBandwidthDownIsSet(true);
  }

  public void unsetBandwidthDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANDWIDTHDOWN_ISSET_ID);
  }

  /** Returns true if field bandwidthDown is set (has been assigned a value) and false otherwise */
  public boolean isSetBandwidthDown() {
    return EncodingUtils.testBit(__isset_bitfield, __BANDWIDTHDOWN_ISSET_ID);
  }

  public void setBandwidthDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANDWIDTHDOWN_ISSET_ID, value);
  }

  public int getNoscript() {
    return this.noscript;
  }

  public void setNoscript(int noscript) {
    this.noscript = noscript;
    setNoscriptIsSet(true);
  }

  public void unsetNoscript() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOSCRIPT_ISSET_ID);
  }

  /** Returns true if field noscript is set (has been assigned a value) and false otherwise */
  public boolean isSetNoscript() {
    return EncodingUtils.testBit(__isset_bitfield, __NOSCRIPT_ISSET_ID);
  }

  public void setNoscriptIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOSCRIPT_ISSET_ID, value);
  }

  public int getConnectionType() {
    return this.connectionType;
  }

  public void setConnectionType(int connectionType) {
    this.connectionType = connectionType;
    setConnectionTypeIsSet(true);
  }

  public void unsetConnectionType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONNECTIONTYPE_ISSET_ID);
  }

  /** Returns true if field connectionType is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionType() {
    return EncodingUtils.testBit(__isset_bitfield, __CONNECTIONTYPE_ISSET_ID);
  }

  public void setConnectionTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONNECTIONTYPE_ISSET_ID, value);
  }

  public String getUrlHosts() {
    return this.urlHosts;
  }

  public void setUrlHosts(String urlHosts) {
    this.urlHosts = urlHosts;
  }

  public void unsetUrlHosts() {
    this.urlHosts = null;
  }

  /** Returns true if field urlHosts is set (has been assigned a value) and false otherwise */
  public boolean isSetUrlHosts() {
    return this.urlHosts != null;
  }

  public void setUrlHostsIsSet(boolean value) {
    if (!value) {
      this.urlHosts = null;
    }
  }

  public String getHttpHead() {
    return this.httpHead;
  }

  public void setHttpHead(String httpHead) {
    this.httpHead = httpHead;
  }

  public void unsetHttpHead() {
    this.httpHead = null;
  }

  /** Returns true if field httpHead is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpHead() {
    return this.httpHead != null;
  }

  public void setHttpHeadIsSet(boolean value) {
    if (!value) {
      this.httpHead = null;
    }
  }

  public String getMonitorExclude() {
    return this.monitorExclude;
  }

  public void setMonitorExclude(String monitorExclude) {
    this.monitorExclude = monitorExclude;
  }

  public void unsetMonitorExclude() {
    this.monitorExclude = null;
  }

  /** Returns true if field monitorExclude is set (has been assigned a value) and false otherwise */
  public boolean isSetMonitorExclude() {
    return this.monitorExclude != null;
  }

  public void setMonitorExcludeIsSet(boolean value) {
    if (!value) {
      this.monitorExclude = null;
    }
  }

  public int getTimeListSize() {
    return (this.timeList == null) ? 0 : this.timeList.size();
  }

  public java.util.Iterator<TimeList> getTimeListIterator() {
    return (this.timeList == null) ? null : this.timeList.iterator();
  }

  public void addToTimeList(TimeList elem) {
    if (this.timeList == null) {
      this.timeList = new ArrayList<TimeList>();
    }
    this.timeList.add(elem);
  }

  public List<TimeList> getTimeList() {
    return this.timeList;
  }

  public void setTimeList(List<TimeList> timeList) {
    this.timeList = timeList;
  }

  public void unsetTimeList() {
    this.timeList = null;
  }

  /** Returns true if field timeList is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeList() {
    return this.timeList != null;
  }

  public void setTimeListIsSet(boolean value) {
    if (!value) {
      this.timeList = null;
    }
  }

  public String getNodeGroupName() {
    return this.nodeGroupName;
  }

  public void setNodeGroupName(String nodeGroupName) {
    this.nodeGroupName = nodeGroupName;
  }

  public void unsetNodeGroupName() {
    this.nodeGroupName = null;
  }

  /** Returns true if field nodeGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeGroupName() {
    return this.nodeGroupName != null;
  }

  public void setNodeGroupNameIsSet(boolean value) {
    if (!value) {
      this.nodeGroupName = null;
    }
  }

  public int getTimeZone() {
    return this.timeZone;
  }

  public void setTimeZone(int timeZone) {
    this.timeZone = timeZone;
    setTimeZoneIsSet(true);
  }

  public void unsetTimeZone() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEZONE_ISSET_ID);
  }

  /** Returns true if field timeZone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEZONE_ISSET_ID);
  }

  public void setTimeZoneIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEZONE_ISSET_ID, value);
  }

  public String getBlock() {
    return this.block;
  }

  public void setBlock(String block) {
    this.block = block;
  }

  public void unsetBlock() {
    this.block = null;
  }

  /** Returns true if field block is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock() {
    return this.block != null;
  }

  public void setBlockIsSet(boolean value) {
    if (!value) {
      this.block = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_GROUP_ID:
      if (value == null) {
        unsetTaskGroupId();
      } else {
        setTaskGroupId((String)value);
      }
      break;

    case TASK_GROUP_TYPE:
      if (value == null) {
        unsetTaskGroupType();
      } else {
        setTaskGroupType((Integer)value);
      }
      break;

    case TASK_GROUP_NAME:
      if (value == null) {
        unsetTaskGroupName();
      } else {
        setTaskGroupName((String)value);
      }
      break;

    case TASK_LIST:
      if (value == null) {
        unsetTaskList();
      } else {
        setTaskList((List<Task>)value);
      }
      break;

    case BEGIN_DATE:
      if (value == null) {
        unsetBeginDate();
      } else {
        setBeginDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case INTERVAL_TIME:
      if (value == null) {
        unsetIntervalTime();
      } else {
        setIntervalTime((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case TIME_OUT:
      if (value == null) {
        unsetTimeOut();
      } else {
        setTimeOut((Integer)value);
      }
      break;

    case WORKORDER:
      if (value == null) {
        unsetWorkorder();
      } else {
        setWorkorder((Integer)value);
      }
      break;

    case WORKORDER_TYPE:
      if (value == null) {
        unsetWorkorderType();
      } else {
        setWorkorderType((Integer)value);
      }
      break;

    case BROWSER:
      if (value == null) {
        unsetBrowser();
      } else {
        setBrowser((String)value);
      }
      break;

    case BANDWIDTH_UP:
      if (value == null) {
        unsetBandwidthUp();
      } else {
        setBandwidthUp((Integer)value);
      }
      break;

    case BANDWIDTH_DOWN:
      if (value == null) {
        unsetBandwidthDown();
      } else {
        setBandwidthDown((Integer)value);
      }
      break;

    case NOSCRIPT:
      if (value == null) {
        unsetNoscript();
      } else {
        setNoscript((Integer)value);
      }
      break;

    case CONNECTION_TYPE:
      if (value == null) {
        unsetConnectionType();
      } else {
        setConnectionType((Integer)value);
      }
      break;

    case URL_HOSTS:
      if (value == null) {
        unsetUrlHosts();
      } else {
        setUrlHosts((String)value);
      }
      break;

    case HTTP_HEAD:
      if (value == null) {
        unsetHttpHead();
      } else {
        setHttpHead((String)value);
      }
      break;

    case MONITOR_EXCLUDE:
      if (value == null) {
        unsetMonitorExclude();
      } else {
        setMonitorExclude((String)value);
      }
      break;

    case TIME_LIST:
      if (value == null) {
        unsetTimeList();
      } else {
        setTimeList((List<TimeList>)value);
      }
      break;

    case NODE_GROUP_NAME:
      if (value == null) {
        unsetNodeGroupName();
      } else {
        setNodeGroupName((String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((Integer)value);
      }
      break;

    case BLOCK:
      if (value == null) {
        unsetBlock();
      } else {
        setBlock((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_GROUP_ID:
      return getTaskGroupId();

    case TASK_GROUP_TYPE:
      return Integer.valueOf(getTaskGroupType());

    case TASK_GROUP_NAME:
      return getTaskGroupName();

    case TASK_LIST:
      return getTaskList();

    case BEGIN_DATE:
      return getBeginDate();

    case END_DATE:
      return getEndDate();

    case INTERVAL_TIME:
      return Integer.valueOf(getIntervalTime());

    case STATUS:
      return Integer.valueOf(getStatus());

    case REMARK:
      return getRemark();

    case TIME_OUT:
      return Integer.valueOf(getTimeOut());

    case WORKORDER:
      return Integer.valueOf(getWorkorder());

    case WORKORDER_TYPE:
      return Integer.valueOf(getWorkorderType());

    case BROWSER:
      return getBrowser();

    case BANDWIDTH_UP:
      return Integer.valueOf(getBandwidthUp());

    case BANDWIDTH_DOWN:
      return Integer.valueOf(getBandwidthDown());

    case NOSCRIPT:
      return Integer.valueOf(getNoscript());

    case CONNECTION_TYPE:
      return Integer.valueOf(getConnectionType());

    case URL_HOSTS:
      return getUrlHosts();

    case HTTP_HEAD:
      return getHttpHead();

    case MONITOR_EXCLUDE:
      return getMonitorExclude();

    case TIME_LIST:
      return getTimeList();

    case NODE_GROUP_NAME:
      return getNodeGroupName();

    case TIME_ZONE:
      return Integer.valueOf(getTimeZone());

    case BLOCK:
      return getBlock();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_GROUP_ID:
      return isSetTaskGroupId();
    case TASK_GROUP_TYPE:
      return isSetTaskGroupType();
    case TASK_GROUP_NAME:
      return isSetTaskGroupName();
    case TASK_LIST:
      return isSetTaskList();
    case BEGIN_DATE:
      return isSetBeginDate();
    case END_DATE:
      return isSetEndDate();
    case INTERVAL_TIME:
      return isSetIntervalTime();
    case STATUS:
      return isSetStatus();
    case REMARK:
      return isSetRemark();
    case TIME_OUT:
      return isSetTimeOut();
    case WORKORDER:
      return isSetWorkorder();
    case WORKORDER_TYPE:
      return isSetWorkorderType();
    case BROWSER:
      return isSetBrowser();
    case BANDWIDTH_UP:
      return isSetBandwidthUp();
    case BANDWIDTH_DOWN:
      return isSetBandwidthDown();
    case NOSCRIPT:
      return isSetNoscript();
    case CONNECTION_TYPE:
      return isSetConnectionType();
    case URL_HOSTS:
      return isSetUrlHosts();
    case HTTP_HEAD:
      return isSetHttpHead();
    case MONITOR_EXCLUDE:
      return isSetMonitorExclude();
    case TIME_LIST:
      return isSetTimeList();
    case NODE_GROUP_NAME:
      return isSetNodeGroupName();
    case TIME_ZONE:
      return isSetTimeZone();
    case BLOCK:
      return isSetBlock();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FullpageTaskGroup)
      return this.equals((FullpageTaskGroup)that);
    return false;
  }

  public boolean equals(FullpageTaskGroup that) {
    if (that == null)
      return false;

    boolean this_present_taskGroupId = true && this.isSetTaskGroupId();
    boolean that_present_taskGroupId = true && that.isSetTaskGroupId();
    if (this_present_taskGroupId || that_present_taskGroupId) {
      if (!(this_present_taskGroupId && that_present_taskGroupId))
        return false;
      if (!this.taskGroupId.equals(that.taskGroupId))
        return false;
    }

    boolean this_present_taskGroupType = true;
    boolean that_present_taskGroupType = true;
    if (this_present_taskGroupType || that_present_taskGroupType) {
      if (!(this_present_taskGroupType && that_present_taskGroupType))
        return false;
      if (this.taskGroupType != that.taskGroupType)
        return false;
    }

    boolean this_present_taskGroupName = true && this.isSetTaskGroupName();
    boolean that_present_taskGroupName = true && that.isSetTaskGroupName();
    if (this_present_taskGroupName || that_present_taskGroupName) {
      if (!(this_present_taskGroupName && that_present_taskGroupName))
        return false;
      if (!this.taskGroupName.equals(that.taskGroupName))
        return false;
    }

    boolean this_present_taskList = true && this.isSetTaskList();
    boolean that_present_taskList = true && that.isSetTaskList();
    if (this_present_taskList || that_present_taskList) {
      if (!(this_present_taskList && that_present_taskList))
        return false;
      if (!this.taskList.equals(that.taskList))
        return false;
    }

    boolean this_present_beginDate = true && this.isSetBeginDate();
    boolean that_present_beginDate = true && that.isSetBeginDate();
    if (this_present_beginDate || that_present_beginDate) {
      if (!(this_present_beginDate && that_present_beginDate))
        return false;
      if (!this.beginDate.equals(that.beginDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_intervalTime = true;
    boolean that_present_intervalTime = true;
    if (this_present_intervalTime || that_present_intervalTime) {
      if (!(this_present_intervalTime && that_present_intervalTime))
        return false;
      if (this.intervalTime != that.intervalTime)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_timeOut = true;
    boolean that_present_timeOut = true;
    if (this_present_timeOut || that_present_timeOut) {
      if (!(this_present_timeOut && that_present_timeOut))
        return false;
      if (this.timeOut != that.timeOut)
        return false;
    }

    boolean this_present_workorder = true;
    boolean that_present_workorder = true;
    if (this_present_workorder || that_present_workorder) {
      if (!(this_present_workorder && that_present_workorder))
        return false;
      if (this.workorder != that.workorder)
        return false;
    }

    boolean this_present_workorderType = true;
    boolean that_present_workorderType = true;
    if (this_present_workorderType || that_present_workorderType) {
      if (!(this_present_workorderType && that_present_workorderType))
        return false;
      if (this.workorderType != that.workorderType)
        return false;
    }

    boolean this_present_browser = true && this.isSetBrowser();
    boolean that_present_browser = true && that.isSetBrowser();
    if (this_present_browser || that_present_browser) {
      if (!(this_present_browser && that_present_browser))
        return false;
      if (!this.browser.equals(that.browser))
        return false;
    }

    boolean this_present_bandwidthUp = true;
    boolean that_present_bandwidthUp = true;
    if (this_present_bandwidthUp || that_present_bandwidthUp) {
      if (!(this_present_bandwidthUp && that_present_bandwidthUp))
        return false;
      if (this.bandwidthUp != that.bandwidthUp)
        return false;
    }

    boolean this_present_bandwidthDown = true;
    boolean that_present_bandwidthDown = true;
    if (this_present_bandwidthDown || that_present_bandwidthDown) {
      if (!(this_present_bandwidthDown && that_present_bandwidthDown))
        return false;
      if (this.bandwidthDown != that.bandwidthDown)
        return false;
    }

    boolean this_present_noscript = true;
    boolean that_present_noscript = true;
    if (this_present_noscript || that_present_noscript) {
      if (!(this_present_noscript && that_present_noscript))
        return false;
      if (this.noscript != that.noscript)
        return false;
    }

    boolean this_present_connectionType = true;
    boolean that_present_connectionType = true;
    if (this_present_connectionType || that_present_connectionType) {
      if (!(this_present_connectionType && that_present_connectionType))
        return false;
      if (this.connectionType != that.connectionType)
        return false;
    }

    boolean this_present_urlHosts = true && this.isSetUrlHosts();
    boolean that_present_urlHosts = true && that.isSetUrlHosts();
    if (this_present_urlHosts || that_present_urlHosts) {
      if (!(this_present_urlHosts && that_present_urlHosts))
        return false;
      if (!this.urlHosts.equals(that.urlHosts))
        return false;
    }

    boolean this_present_httpHead = true && this.isSetHttpHead();
    boolean that_present_httpHead = true && that.isSetHttpHead();
    if (this_present_httpHead || that_present_httpHead) {
      if (!(this_present_httpHead && that_present_httpHead))
        return false;
      if (!this.httpHead.equals(that.httpHead))
        return false;
    }

    boolean this_present_monitorExclude = true && this.isSetMonitorExclude();
    boolean that_present_monitorExclude = true && that.isSetMonitorExclude();
    if (this_present_monitorExclude || that_present_monitorExclude) {
      if (!(this_present_monitorExclude && that_present_monitorExclude))
        return false;
      if (!this.monitorExclude.equals(that.monitorExclude))
        return false;
    }

    boolean this_present_timeList = true && this.isSetTimeList();
    boolean that_present_timeList = true && that.isSetTimeList();
    if (this_present_timeList || that_present_timeList) {
      if (!(this_present_timeList && that_present_timeList))
        return false;
      if (!this.timeList.equals(that.timeList))
        return false;
    }

    boolean this_present_nodeGroupName = true && this.isSetNodeGroupName();
    boolean that_present_nodeGroupName = true && that.isSetNodeGroupName();
    if (this_present_nodeGroupName || that_present_nodeGroupName) {
      if (!(this_present_nodeGroupName && that_present_nodeGroupName))
        return false;
      if (!this.nodeGroupName.equals(that.nodeGroupName))
        return false;
    }

    boolean this_present_timeZone = true;
    boolean that_present_timeZone = true;
    if (this_present_timeZone || that_present_timeZone) {
      if (!(this_present_timeZone && that_present_timeZone))
        return false;
      if (this.timeZone != that.timeZone)
        return false;
    }

    boolean this_present_block = true && this.isSetBlock();
    boolean that_present_block = true && that.isSetBlock();
    if (this_present_block || that_present_block) {
      if (!(this_present_block && that_present_block))
        return false;
      if (!this.block.equals(that.block))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FullpageTaskGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FullpageTaskGroup typedOther = (FullpageTaskGroup)other;

    lastComparison = Boolean.valueOf(isSetTaskGroupId()).compareTo(typedOther.isSetTaskGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupId()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupId, typedOther.taskGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskGroupType()).compareTo(typedOther.isSetTaskGroupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupType, typedOther.taskGroupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskGroupName()).compareTo(typedOther.isSetTaskGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupName()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupName, typedOther.taskGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskList()).compareTo(typedOther.isSetTaskList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskList()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskList, typedOther.taskList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginDate()).compareTo(typedOther.isSetBeginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginDate()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.beginDate, typedOther.beginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(typedOther.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.endDate, typedOther.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntervalTime()).compareTo(typedOther.isSetIntervalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntervalTime()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.intervalTime, typedOther.intervalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeOut()).compareTo(typedOther.isSetTimeOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeOut()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.timeOut, typedOther.timeOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkorder()).compareTo(typedOther.isSetWorkorder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkorder()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.workorder, typedOther.workorder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkorderType()).compareTo(typedOther.isSetWorkorderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkorderType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.workorderType, typedOther.workorderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrowser()).compareTo(typedOther.isSetBrowser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrowser()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.browser, typedOther.browser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBandwidthUp()).compareTo(typedOther.isSetBandwidthUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBandwidthUp()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.bandwidthUp, typedOther.bandwidthUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBandwidthDown()).compareTo(typedOther.isSetBandwidthDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBandwidthDown()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.bandwidthDown, typedOther.bandwidthDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoscript()).compareTo(typedOther.isSetNoscript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoscript()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.noscript, typedOther.noscript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionType()).compareTo(typedOther.isSetConnectionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.connectionType, typedOther.connectionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrlHosts()).compareTo(typedOther.isSetUrlHosts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrlHosts()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.urlHosts, typedOther.urlHosts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHttpHead()).compareTo(typedOther.isSetHttpHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpHead()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.httpHead, typedOther.httpHead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonitorExclude()).compareTo(typedOther.isSetMonitorExclude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonitorExclude()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.monitorExclude, typedOther.monitorExclude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeList()).compareTo(typedOther.isSetTimeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeList()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.timeList, typedOther.timeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeGroupName()).compareTo(typedOther.isSetNodeGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeGroupName()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.nodeGroupName, typedOther.nodeGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeZone()).compareTo(typedOther.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.timeZone, typedOther.timeZone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock()).compareTo(typedOther.isSetBlock());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.block, typedOther.block);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FullpageTaskGroup(");
    boolean first = true;

    sb.append("taskGroupId:");
    if (this.taskGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.taskGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskGroupType:");
    sb.append(this.taskGroupType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskGroupName:");
    if (this.taskGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskGroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskList:");
    if (this.taskList == null) {
      sb.append("null");
    } else {
      sb.append(this.taskList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginDate:");
    if (this.beginDate == null) {
      sb.append("null");
    } else {
      sb.append(this.beginDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intervalTime:");
    sb.append(this.intervalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeOut:");
    sb.append(this.timeOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workorder:");
    sb.append(this.workorder);
    first = false;
    if (!first) sb.append(", ");
    sb.append("workorderType:");
    sb.append(this.workorderType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("browser:");
    if (this.browser == null) {
      sb.append("null");
    } else {
      sb.append(this.browser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bandwidthUp:");
    sb.append(this.bandwidthUp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bandwidthDown:");
    sb.append(this.bandwidthDown);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noscript:");
    sb.append(this.noscript);
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectionType:");
    sb.append(this.connectionType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("urlHosts:");
    if (this.urlHosts == null) {
      sb.append("null");
    } else {
      sb.append(this.urlHosts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("httpHead:");
    if (this.httpHead == null) {
      sb.append("null");
    } else {
      sb.append(this.httpHead);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monitorExclude:");
    if (this.monitorExclude == null) {
      sb.append("null");
    } else {
      sb.append(this.monitorExclude);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeList:");
    if (this.timeList == null) {
      sb.append("null");
    } else {
      sb.append(this.timeList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeGroupName:");
    if (this.nodeGroupName == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeGroupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeZone:");
    sb.append(this.timeZone);
    first = false;
    if (!first) sb.append(", ");
    sb.append("block:");
    if (this.block == null) {
      sb.append("null");
    } else {
      sb.append(this.block);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate()  {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FullpageTaskGroupStandardSchemeFactory implements SchemeFactory {
    public FullpageTaskGroupStandardScheme getScheme() {
      return new FullpageTaskGroupStandardScheme();
    }
  }

  private static class FullpageTaskGroupStandardScheme extends StandardScheme<FullpageTaskGroup> {

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, FullpageTaskGroup struct)  {
      com.cnc.dna.platform.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_GROUP_ID
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskGroupId = iprot.readString();
              struct.setTaskGroupIdIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_GROUP_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.taskGroupType = iprot.readI32();
              struct.setTaskGroupTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASK_GROUP_NAME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskGroupName = iprot.readString();
              struct.setTaskGroupNameIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_LIST
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.LIST) {
              {
                com.cnc.dna.platform.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.taskList = new ArrayList<Task>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  Task _elem34; // required
                  _elem34 = new Task();
                  _elem34.read(iprot);
                  struct.taskList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setTaskListIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BEGIN_DATE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.beginDate = iprot.readString();
              struct.setBeginDateIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_DATE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTERVAL_TIME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.intervalTime = iprot.readI32();
              struct.setIntervalTimeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_OUT
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.timeOut = iprot.readI32();
              struct.setTimeOutIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WORKORDER
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.workorder = iprot.readI32();
              struct.setWorkorderIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WORKORDER_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.workorderType = iprot.readI32();
              struct.setWorkorderTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BROWSER
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.browser = iprot.readString();
              struct.setBrowserIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BANDWIDTH_UP
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.bandwidthUp = iprot.readI32();
              struct.setBandwidthUpIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BANDWIDTH_DOWN
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.bandwidthDown = iprot.readI32();
              struct.setBandwidthDownIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NOSCRIPT
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.noscript = iprot.readI32();
              struct.setNoscriptIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CONNECTION_TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.connectionType = iprot.readI32();
              struct.setConnectionTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // URL_HOSTS
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.urlHosts = iprot.readString();
              struct.setUrlHostsIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // HTTP_HEAD
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.httpHead = iprot.readString();
              struct.setHttpHeadIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MONITOR_EXCLUDE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.monitorExclude = iprot.readString();
              struct.setMonitorExcludeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TIME_LIST
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.LIST) {
              {
                com.cnc.dna.platform.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.timeList = new ArrayList<TimeList>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  TimeList _elem37; // required
                  _elem37 = new TimeList();
                  _elem37.read(iprot);
                  struct.timeList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setTimeListIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // NODE_GROUP_NAME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.nodeGroupName = iprot.readString();
              struct.setNodeGroupNameIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TIME_ZONE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.I32) {
              struct.timeZone = iprot.readI32();
              struct.setTimeZoneIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BLOCK
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.block = iprot.readString();
              struct.setBlockIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, FullpageTaskGroup struct)  {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskGroupId != null) {
        oprot.writeFieldBegin(TASK_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.taskGroupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_GROUP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.taskGroupType);
      oprot.writeFieldEnd();
      if (struct.taskGroupName != null) {
        oprot.writeFieldBegin(TASK_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.taskGroupName);
        oprot.writeFieldEnd();
      }
      if (struct.taskList != null) {
        oprot.writeFieldBegin(TASK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, struct.taskList.size()));
          for (Task _iter38 : struct.taskList)
          {
            _iter38.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.beginDate != null) {
        oprot.writeFieldBegin(BEGIN_DATE_FIELD_DESC);
        oprot.writeString(struct.beginDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INTERVAL_TIME_FIELD_DESC);
      oprot.writeI32(struct.intervalTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_OUT_FIELD_DESC);
      oprot.writeI32(struct.timeOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORKORDER_FIELD_DESC);
      oprot.writeI32(struct.workorder);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WORKORDER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.workorderType);
      oprot.writeFieldEnd();
      if (struct.browser != null) {
        oprot.writeFieldBegin(BROWSER_FIELD_DESC);
        oprot.writeString(struct.browser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANDWIDTH_UP_FIELD_DESC);
      oprot.writeI32(struct.bandwidthUp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANDWIDTH_DOWN_FIELD_DESC);
      oprot.writeI32(struct.bandwidthDown);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOSCRIPT_FIELD_DESC);
      oprot.writeI32(struct.noscript);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONNECTION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.connectionType);
      oprot.writeFieldEnd();
      if (struct.urlHosts != null) {
        oprot.writeFieldBegin(URL_HOSTS_FIELD_DESC);
        oprot.writeString(struct.urlHosts);
        oprot.writeFieldEnd();
      }
      if (struct.httpHead != null) {
        oprot.writeFieldBegin(HTTP_HEAD_FIELD_DESC);
        oprot.writeString(struct.httpHead);
        oprot.writeFieldEnd();
      }
      if (struct.monitorExclude != null) {
        oprot.writeFieldBegin(MONITOR_EXCLUDE_FIELD_DESC);
        oprot.writeString(struct.monitorExclude);
        oprot.writeFieldEnd();
      }
      if (struct.timeList != null) {
        oprot.writeFieldBegin(TIME_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, struct.timeList.size()));
          for (TimeList _iter39 : struct.timeList)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nodeGroupName != null) {
        oprot.writeFieldBegin(NODE_GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.nodeGroupName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
      oprot.writeI32(struct.timeZone);
      oprot.writeFieldEnd();
      if (struct.block != null) {
        oprot.writeFieldBegin(BLOCK_FIELD_DESC);
        oprot.writeString(struct.block);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FullpageTaskGroupTupleSchemeFactory implements SchemeFactory {
    public FullpageTaskGroupTupleScheme getScheme() {
      return new FullpageTaskGroupTupleScheme();
    }
  }

  private static class FullpageTaskGroupTupleScheme extends TupleScheme<FullpageTaskGroup> {

    @Override
    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, FullpageTaskGroup struct)  {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskGroupType()) {
        optionals.set(1);
      }
      if (struct.isSetTaskGroupName()) {
        optionals.set(2);
      }
      if (struct.isSetTaskList()) {
        optionals.set(3);
      }
      if (struct.isSetBeginDate()) {
        optionals.set(4);
      }
      if (struct.isSetEndDate()) {
        optionals.set(5);
      }
      if (struct.isSetIntervalTime()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetTimeOut()) {
        optionals.set(9);
      }
      if (struct.isSetWorkorder()) {
        optionals.set(10);
      }
      if (struct.isSetWorkorderType()) {
        optionals.set(11);
      }
      if (struct.isSetBrowser()) {
        optionals.set(12);
      }
      if (struct.isSetBandwidthUp()) {
        optionals.set(13);
      }
      if (struct.isSetBandwidthDown()) {
        optionals.set(14);
      }
      if (struct.isSetNoscript()) {
        optionals.set(15);
      }
      if (struct.isSetConnectionType()) {
        optionals.set(16);
      }
      if (struct.isSetUrlHosts()) {
        optionals.set(17);
      }
      if (struct.isSetHttpHead()) {
        optionals.set(18);
      }
      if (struct.isSetMonitorExclude()) {
        optionals.set(19);
      }
      if (struct.isSetTimeList()) {
        optionals.set(20);
      }
      if (struct.isSetNodeGroupName()) {
        optionals.set(21);
      }
      if (struct.isSetTimeZone()) {
        optionals.set(22);
      }
      if (struct.isSetBlock()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetTaskGroupId()) {
        oprot.writeString(struct.taskGroupId);
      }
      if (struct.isSetTaskGroupType()) {
        oprot.writeI32(struct.taskGroupType);
      }
      if (struct.isSetTaskGroupName()) {
        oprot.writeString(struct.taskGroupName);
      }
      if (struct.isSetTaskList()) {
        {
          oprot.writeI32(struct.taskList.size());
          for (Task _iter40 : struct.taskList)
          {
            _iter40.write(oprot);
          }
        }
      }
      if (struct.isSetBeginDate()) {
        oprot.writeString(struct.beginDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetIntervalTime()) {
        oprot.writeI32(struct.intervalTime);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetTimeOut()) {
        oprot.writeI32(struct.timeOut);
      }
      if (struct.isSetWorkorder()) {
        oprot.writeI32(struct.workorder);
      }
      if (struct.isSetWorkorderType()) {
        oprot.writeI32(struct.workorderType);
      }
      if (struct.isSetBrowser()) {
        oprot.writeString(struct.browser);
      }
      if (struct.isSetBandwidthUp()) {
        oprot.writeI32(struct.bandwidthUp);
      }
      if (struct.isSetBandwidthDown()) {
        oprot.writeI32(struct.bandwidthDown);
      }
      if (struct.isSetNoscript()) {
        oprot.writeI32(struct.noscript);
      }
      if (struct.isSetConnectionType()) {
        oprot.writeI32(struct.connectionType);
      }
      if (struct.isSetUrlHosts()) {
        oprot.writeString(struct.urlHosts);
      }
      if (struct.isSetHttpHead()) {
        oprot.writeString(struct.httpHead);
      }
      if (struct.isSetMonitorExclude()) {
        oprot.writeString(struct.monitorExclude);
      }
      if (struct.isSetTimeList()) {
        {
          oprot.writeI32(struct.timeList.size());
          for (TimeList _iter41 : struct.timeList)
          {
            _iter41.write(oprot);
          }
        }
      }
      if (struct.isSetNodeGroupName()) {
        oprot.writeString(struct.nodeGroupName);
      }
      if (struct.isSetTimeZone()) {
        oprot.writeI32(struct.timeZone);
      }
      if (struct.isSetBlock()) {
        oprot.writeString(struct.block);
      }
    }

    @Override
    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, FullpageTaskGroup struct)  {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.taskGroupId = iprot.readString();
        struct.setTaskGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskGroupType = iprot.readI32();
        struct.setTaskGroupTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taskGroupName = iprot.readString();
        struct.setTaskGroupNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          com.cnc.dna.platform.thrift.protocol.TList _list42 = new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskList = new ArrayList<Task>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            Task _elem44; // required
            _elem44 = new Task();
            _elem44.read(iprot);
            struct.taskList.add(_elem44);
          }
        }
        struct.setTaskListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.beginDate = iprot.readString();
        struct.setBeginDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.intervalTime = iprot.readI32();
        struct.setIntervalTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timeOut = iprot.readI32();
        struct.setTimeOutIsSet(true);
      }
      if (incoming.get(10)) {
        struct.workorder = iprot.readI32();
        struct.setWorkorderIsSet(true);
      }
      if (incoming.get(11)) {
        struct.workorderType = iprot.readI32();
        struct.setWorkorderTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.browser = iprot.readString();
        struct.setBrowserIsSet(true);
      }
      if (incoming.get(13)) {
        struct.bandwidthUp = iprot.readI32();
        struct.setBandwidthUpIsSet(true);
      }
      if (incoming.get(14)) {
        struct.bandwidthDown = iprot.readI32();
        struct.setBandwidthDownIsSet(true);
      }
      if (incoming.get(15)) {
        struct.noscript = iprot.readI32();
        struct.setNoscriptIsSet(true);
      }
      if (incoming.get(16)) {
        struct.connectionType = iprot.readI32();
        struct.setConnectionTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.urlHosts = iprot.readString();
        struct.setUrlHostsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.httpHead = iprot.readString();
        struct.setHttpHeadIsSet(true);
      }
      if (incoming.get(19)) {
        struct.monitorExclude = iprot.readString();
        struct.setMonitorExcludeIsSet(true);
      }
      if (incoming.get(20)) {
        {
          com.cnc.dna.platform.thrift.protocol.TList _list45 = new com.cnc.dna.platform.thrift.protocol.TList(com.cnc.dna.platform.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.timeList = new ArrayList<TimeList>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            TimeList _elem47; // required
            _elem47 = new TimeList();
            _elem47.read(iprot);
            struct.timeList.add(_elem47);
          }
        }
        struct.setTimeListIsSet(true);
      }
      if (incoming.get(21)) {
        struct.nodeGroupName = iprot.readString();
        struct.setNodeGroupNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.timeZone = iprot.readI32();
        struct.setTimeZoneIsSet(true);
      }
      if (incoming.get(23)) {
        struct.block = iprot.readString();
        struct.setBlockIsSet(true);
      }
    }
  }

}

