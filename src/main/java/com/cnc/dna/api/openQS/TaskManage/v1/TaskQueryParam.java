/**
 * Autogenerated by Thrift Compiler (DNA Version, Base 0.90.0)
 *
 *  @CDN Department. ChinaNetCenter 2014
 */
package com.cnc.dna.api.openQS.TaskManage.v1;

import com.cnc.dna.platform.thrift.scheme.IScheme;
import com.cnc.dna.platform.thrift.scheme.SchemeFactory;
import com.cnc.dna.platform.thrift.scheme.StandardScheme;

import com.cnc.dna.platform.thrift.scheme.TupleScheme;
import com.cnc.dna.platform.thrift.protocol.TTupleProtocol;
import com.cnc.dna.platform.thrift.protocol.TProtocolException;
import com.cnc.dna.platform.thrift.EncodingUtils;
import com.cnc.dna.platform.thrift.TException;
import com.cnc.dna.platform.rpc.spi.context.IdlInvocation;
import com.cnc.dna.platform.rpc.spi.context.IdlResult;
import com.cnc.dna.platform.rpc.Handler;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TaskQueryParam implements com.cnc.dna.platform.thrift.TBase<TaskQueryParam, TaskQueryParam._Fields>, java.io.Serializable, Cloneable {
  private static final com.cnc.dna.platform.thrift.protocol.TStruct STRUCT_DESC = new com.cnc.dna.platform.thrift.protocol.TStruct("TaskQueryParam");

  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_GROUP_NAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskGroupName", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)1);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_NAME_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskName", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)2);
  private static final com.cnc.dna.platform.thrift.protocol.TField STATUS_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("status", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)3);
  private static final com.cnc.dna.platform.thrift.protocol.TField TYPE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("type", com.cnc.dna.platform.thrift.protocol.TType.SET, (short)4);
  private static final com.cnc.dna.platform.thrift.protocol.TField TASK_DOMAIN_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("taskDomain", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)5);
  private static final com.cnc.dna.platform.thrift.protocol.TField IS_SOURCE_FIELD_DESC = new com.cnc.dna.platform.thrift.protocol.TField("isSource", com.cnc.dna.platform.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskQueryParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskQueryParamTupleSchemeFactory());
  }

  private String taskGroupName; // optional
  private String taskName; // optional
  private String status; // optional
  private Set<TaskGroupType> type; // required
  private String taskDomain; // required
  private String isSource; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements com.cnc.dna.platform.thrift.TFieldIdEnum {
    TASK_GROUP_NAME((short)1, "taskGroupName"),
    TASK_NAME((short)2, "taskName"),
    STATUS((short)3, "status"),
    TYPE((short)4, "type"),
    TASK_DOMAIN((short)5, "taskDomain"),
    IS_SOURCE((short)6, "isSource");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_GROUP_NAME
          return TASK_GROUP_NAME;
        case 2: // TASK_NAME
          return TASK_NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // TYPE
          return TYPE;
        case 5: // TASK_DOMAIN
          return TASK_DOMAIN;
        case 6: // IS_SOURCE
          return IS_SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TASK_GROUP_NAME,_Fields.TASK_NAME,_Fields.STATUS};
  public static final Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> metaDataMap;
  public static final List<_Fields> fieldList = new ArrayList();
  static {
    Map<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, com.cnc.dna.platform.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_GROUP_NAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskGroupName", com.cnc.dna.platform.thrift.TFieldRequirementType.OPTIONAL, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_GROUP_NAME);
    tmpMap.put(_Fields.TASK_NAME, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskName", com.cnc.dna.platform.thrift.TFieldRequirementType.OPTIONAL, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_NAME);
    tmpMap.put(_Fields.STATUS, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("status", com.cnc.dna.platform.thrift.TFieldRequirementType.OPTIONAL, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.STATUS);
    tmpMap.put(_Fields.TYPE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("type", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.SetMetaData(com.cnc.dna.platform.thrift.protocol.TType.SET, 
            new com.cnc.dna.platform.thrift.meta_data.EnumMetaData(com.cnc.dna.platform.thrift.protocol.TType.ENUM, TaskGroupType.class))));
    fieldList.add(_Fields.TYPE);
    tmpMap.put(_Fields.TASK_DOMAIN, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("taskDomain", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.TASK_DOMAIN);
    tmpMap.put(_Fields.IS_SOURCE, new com.cnc.dna.platform.thrift.meta_data.FieldMetaData("isSource", com.cnc.dna.platform.thrift.TFieldRequirementType.DEFAULT, 
        new com.cnc.dna.platform.thrift.meta_data.FieldValueMetaData(com.cnc.dna.platform.thrift.protocol.TType.STRING)));
    fieldList.add(_Fields.IS_SOURCE);
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    com.cnc.dna.platform.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskQueryParam.class, metaDataMap);
  }

  public _Fields getFieldByIndex(int index) {
  	if ((!fieldList.isEmpty()) && index >= 0 && index < fieldList.size()) {
		return fieldList.get(index);
	}
	else {
		return null;
	}
}
  public TaskQueryParam() {
  }

  public TaskQueryParam(
    Set<TaskGroupType> type,
    String taskDomain,
    String isSource)
  {
    this();
    this.type = type;
    this.taskDomain = taskDomain;
    this.isSource = isSource;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskQueryParam(TaskQueryParam other) {
    if (other.isSetTaskGroupName()) {
      this.taskGroupName = other.taskGroupName;
    }
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetType()) {
      Set<TaskGroupType> __this__type = new HashSet<TaskGroupType>();
      for (TaskGroupType other_element : other.type) {
        __this__type.add(other_element);
      }
      this.type = __this__type;
    }
    if (other.isSetTaskDomain()) {
      this.taskDomain = other.taskDomain;
    }
    if (other.isSetIsSource()) {
      this.isSource = other.isSource;
    }
  }

  public TaskQueryParam deepCopy() {
    return new TaskQueryParam(this);
  }

  @Override
  public void clear() {
    this.taskGroupName = null;
    this.taskName = null;
    this.status = null;
    this.type = null;
    this.taskDomain = null;
    this.isSource = null;
  }

  public String getTaskGroupName() {
    return this.taskGroupName;
  }

  public void setTaskGroupName(String taskGroupName) {
    this.taskGroupName = taskGroupName;
  }

  public void unsetTaskGroupName() {
    this.taskGroupName = null;
  }

  /** Returns true if field taskGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskGroupName() {
    return this.taskGroupName != null;
  }

  public void setTaskGroupNameIsSet(boolean value) {
    if (!value) {
      this.taskGroupName = null;
    }
  }

  public String getTaskName() {
    return this.taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getTypeSize() {
    return (this.type == null) ? 0 : this.type.size();
  }

  public java.util.Iterator<TaskGroupType> getTypeIterator() {
    return (this.type == null) ? null : this.type.iterator();
  }

  public void addToType(TaskGroupType elem) {
    if (this.type == null) {
      this.type = new HashSet<TaskGroupType>();
    }
    this.type.add(elem);
  }

  public Set<TaskGroupType> getType() {
    return this.type;
  }

  public void setType(Set<TaskGroupType> type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getTaskDomain() {
    return this.taskDomain;
  }

  public void setTaskDomain(String taskDomain) {
    this.taskDomain = taskDomain;
  }

  public void unsetTaskDomain() {
    this.taskDomain = null;
  }

  /** Returns true if field taskDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskDomain() {
    return this.taskDomain != null;
  }

  public void setTaskDomainIsSet(boolean value) {
    if (!value) {
      this.taskDomain = null;
    }
  }

  public String getIsSource() {
    return this.isSource;
  }

  public void setIsSource(String isSource) {
    this.isSource = isSource;
  }

  public void unsetIsSource() {
    this.isSource = null;
  }

  /** Returns true if field isSource is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSource() {
    return this.isSource != null;
  }

  public void setIsSourceIsSet(boolean value) {
    if (!value) {
      this.isSource = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_GROUP_NAME:
      if (value == null) {
        unsetTaskGroupName();
      } else {
        setTaskGroupName((String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Set<TaskGroupType>)value);
      }
      break;

    case TASK_DOMAIN:
      if (value == null) {
        unsetTaskDomain();
      } else {
        setTaskDomain((String)value);
      }
      break;

    case IS_SOURCE:
      if (value == null) {
        unsetIsSource();
      } else {
        setIsSource((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_GROUP_NAME:
      return getTaskGroupName();

    case TASK_NAME:
      return getTaskName();

    case STATUS:
      return getStatus();

    case TYPE:
      return getType();

    case TASK_DOMAIN:
      return getTaskDomain();

    case IS_SOURCE:
      return getIsSource();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_GROUP_NAME:
      return isSetTaskGroupName();
    case TASK_NAME:
      return isSetTaskName();
    case STATUS:
      return isSetStatus();
    case TYPE:
      return isSetType();
    case TASK_DOMAIN:
      return isSetTaskDomain();
    case IS_SOURCE:
      return isSetIsSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskQueryParam)
      return this.equals((TaskQueryParam)that);
    return false;
  }

  public boolean equals(TaskQueryParam that) {
    if (that == null)
      return false;

    boolean this_present_taskGroupName = true && this.isSetTaskGroupName();
    boolean that_present_taskGroupName = true && that.isSetTaskGroupName();
    if (this_present_taskGroupName || that_present_taskGroupName) {
      if (!(this_present_taskGroupName && that_present_taskGroupName))
        return false;
      if (!this.taskGroupName.equals(that.taskGroupName))
        return false;
    }

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_taskDomain = true && this.isSetTaskDomain();
    boolean that_present_taskDomain = true && that.isSetTaskDomain();
    if (this_present_taskDomain || that_present_taskDomain) {
      if (!(this_present_taskDomain && that_present_taskDomain))
        return false;
      if (!this.taskDomain.equals(that.taskDomain))
        return false;
    }

    boolean this_present_isSource = true && this.isSetIsSource();
    boolean that_present_isSource = true && that.isSetIsSource();
    if (this_present_isSource || that_present_isSource) {
      if (!(this_present_isSource && that_present_isSource))
        return false;
      if (!this.isSource.equals(that.isSource))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TaskQueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TaskQueryParam typedOther = (TaskQueryParam)other;

    lastComparison = Boolean.valueOf(isSetTaskGroupName()).compareTo(typedOther.isSetTaskGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskGroupName()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskGroupName, typedOther.taskGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskName()).compareTo(typedOther.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskName, typedOther.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskDomain()).compareTo(typedOther.isSetTaskDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskDomain()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.taskDomain, typedOther.taskDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSource()).compareTo(typedOther.isSetIsSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSource()) {
      lastComparison = com.cnc.dna.platform.thrift.TBaseHelper.compareTo(this.isSource, typedOther.isSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot)  {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot)  {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskQueryParam(");
    boolean first = true;

    if (isSetTaskGroupName()) {
      sb.append("taskGroupName:");
      if (this.taskGroupName == null) {
        sb.append("null");
      } else {
        sb.append(this.taskGroupName);
      }
      first = false;
    }
    if (isSetTaskName()) {
      if (!first) sb.append(", ");
      sb.append("taskName:");
      if (this.taskName == null) {
        sb.append("null");
      } else {
        sb.append(this.taskName);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskDomain:");
    if (this.taskDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.taskDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSource:");
    if (this.isSource == null) {
      sb.append("null");
    } else {
      sb.append(this.isSource);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate()  {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(out)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new com.cnc.dna.platform.thrift.protocol.TCompactProtocol(new com.cnc.dna.platform.thrift.transport.TIOStreamTransport(in)));
    } catch (com.cnc.dna.platform.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskQueryParamStandardSchemeFactory implements SchemeFactory {
    public TaskQueryParamStandardScheme getScheme() {
      return new TaskQueryParamStandardScheme();
    }
  }

  private static class TaskQueryParamStandardScheme extends StandardScheme<TaskQueryParam> {

    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol iprot, TaskQueryParam struct)  {
      com.cnc.dna.platform.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_GROUP_NAME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskGroupName = iprot.readString();
              struct.setTaskGroupNameIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_NAME
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.SET) {
              {
                com.cnc.dna.platform.thrift.protocol.TSet _set48 = iprot.readSetBegin();
                struct.type = new HashSet<TaskGroupType>(2*_set48.size);
                for (int _i49 = 0; _i49 < _set48.size; ++_i49)
                {
                  TaskGroupType _elem50; // required
                  _elem50 = TaskGroupType.findByValue(iprot.readI32());
                  struct.type.add(_elem50);
                }
                iprot.readSetEnd();
              }
              struct.setTypeIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_DOMAIN
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.taskDomain = iprot.readString();
              struct.setTaskDomainIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_SOURCE
            if (schemeField.type == com.cnc.dna.platform.thrift.protocol.TType.STRING) {
              struct.isSource = iprot.readString();
              struct.setIsSourceIsSet(true);
            } else { 
              com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            com.cnc.dna.platform.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol oprot, TaskQueryParam struct)  {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskGroupName != null) {
        if (struct.isSetTaskGroupName()) {
          oprot.writeFieldBegin(TASK_GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.taskGroupName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.taskName != null) {
        if (struct.isSetTaskName()) {
          oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
          oprot.writeString(struct.taskName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        {
          oprot.writeSetBegin(new com.cnc.dna.platform.thrift.protocol.TSet(com.cnc.dna.platform.thrift.protocol.TType.I32, struct.type.size()));
          for (TaskGroupType _iter51 : struct.type)
          {
            oprot.writeI32(_iter51.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.taskDomain != null) {
        oprot.writeFieldBegin(TASK_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.taskDomain);
        oprot.writeFieldEnd();
      }
      if (struct.isSource != null) {
        oprot.writeFieldBegin(IS_SOURCE_FIELD_DESC);
        oprot.writeString(struct.isSource);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskQueryParamTupleSchemeFactory implements SchemeFactory {
    public TaskQueryParamTupleScheme getScheme() {
      return new TaskQueryParamTupleScheme();
    }
  }

  private static class TaskQueryParamTupleScheme extends TupleScheme<TaskQueryParam> {

    @Override
    public void write(com.cnc.dna.platform.thrift.protocol.TProtocol prot, TaskQueryParam struct)  {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskGroupName()) {
        optionals.set(0);
      }
      if (struct.isSetTaskName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      if (struct.isSetTaskDomain()) {
        optionals.set(4);
      }
      if (struct.isSetIsSource()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTaskGroupName()) {
        oprot.writeString(struct.taskGroupName);
      }
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetType()) {
        {
          oprot.writeI32(struct.type.size());
          for (TaskGroupType _iter52 : struct.type)
          {
            oprot.writeI32(_iter52.getValue());
          }
        }
      }
      if (struct.isSetTaskDomain()) {
        oprot.writeString(struct.taskDomain);
      }
      if (struct.isSetIsSource()) {
        oprot.writeString(struct.isSource);
      }
    }

    @Override
    public void read(com.cnc.dna.platform.thrift.protocol.TProtocol prot, TaskQueryParam struct)  {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.taskGroupName = iprot.readString();
        struct.setTaskGroupNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        {
          com.cnc.dna.platform.thrift.protocol.TSet _set53 = new com.cnc.dna.platform.thrift.protocol.TSet(com.cnc.dna.platform.thrift.protocol.TType.I32, iprot.readI32());
          struct.type = new HashSet<TaskGroupType>(2*_set53.size);
          for (int _i54 = 0; _i54 < _set53.size; ++_i54)
          {
            TaskGroupType _elem55; // required
            _elem55 = TaskGroupType.findByValue(iprot.readI32());
            struct.type.add(_elem55);
          }
        }
        struct.setTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.taskDomain = iprot.readString();
        struct.setTaskDomainIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isSource = iprot.readString();
        struct.setIsSourceIsSet(true);
      }
    }
  }

}

